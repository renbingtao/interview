
========================引论========================

多数计算机有两种运行模式：【内核态】和【用户态】
软件最基础的部分是操作系统，它运行在内核态（也叫管态、核心态），这个状态下操作系统具有对硬件的完全控制权，能够执行机器能够执行的任何指令
软件的其他部分运行在用户态，这个状态下只能使用机器指令中的一个子集
用户接口程序（shell或GUI）处于用户态程序中的最低层次，允许用户运行其他程序，比如web浏览器，电子邮件阅读器或音乐播放器
如所示，操作系统运行在裸机之上

用户态     web浏览器、音乐播放器            软
          用户接口程序（shell或GUI）
内核态     操作系统                        件
                                          硬件

操作系统和普通软件的主要区别是：普通软件有很多同类产品可以替换，或者自己写一个；但操作系统不能自己写，它由硬件保护，防止用户对其修改
然而，在嵌入式系统（没有内核态）或解释系统（基于java的操作系统，它采用解释方式而非硬件方式区分组件）中，上述区别是模糊的

什么是操作系统
很难给出准确定义。操作系统是运行在内核态的软件，尽管这种说法并不总是符合事实

云计算
相对小型的计算机（包括智能手机、平板等）连接到巨大的远程数据中心的服务器，本地计算机处理用户界面，而服务器进行计算。举例：电商

计算机硬件简介
CPU、内存以及IO设备都由一条【系统总线】连接起来并通过总线与其他设备通信

处理器
计算机的大脑是CPU，它从内存中取出指令并执行。在每个CPU基本周期中，首先从内存中取出指令，解码以确定其【类型】和【操作数】，执行。然后取指，解码，执行。按照这种方式，程序被执行完成
每个CPU都有一套可执行的专用指令集。x86处理器不能执行ARM程序，反之亦然

所有的CPU内都有一些用来保存关键变量和临时数据的寄存器。通常在指令集中提供一些指令，用来将一个字从内存调入寄存器，以及将一个字从寄存器存入内存
除了用来保存变量和临时结果的通用寄存器之外，多数计算机还有一些对程序员可见的【专用寄存器】，其中之一是【程序计数器】，它保存了将要取出的下一条指令的内存地址
另一个寄存器是【堆栈指针】，它指向内存中当前栈的顶端。该栈包含了每个执行过程的帧栈
还有【程序状态字】（PSW）寄存器，包含了各种控制位

在时间多路复用CPUT中，操作系统经常中止某个正在运行的程序并启动/再启动另一个程序。每次停止一个运行的程序，操作系统必须所有的寄存器值，在稍后该程序再次被运行时，可以把这些寄存器重新装入

许多现代CPU具有同时取出多条指令的机制，比如一个CPU可以有单独的取指单元、解码单元和执行单元，当它执行指令n时，可以对指令n+1解码，并且读取指令n+2,，这种机制称为流水线
比流水线更先进的设计是超标量CPU，在这种设计中，有多个执行单元，比如一个CPU用于整数算数运算，一个CPU用于浮点数运算，一个CPU用于布尔运算。两个或更多的指令被同时取出，解码，装入缓冲区，直到它们被执行完毕。只要有一个执行单元空闲，就检查【保持缓冲区】中是否有可处理的指令，有则从缓冲中移除并执行。这种设计存在一种隐患：程序的指令经常不按顺序执行
取指单元    解码单元                    执行单元
                        保持缓冲区      执行单元
取指单元    解码单元                    执行单元

除了嵌入式系统中的简单CPU，多数CPU有两种模式：内核态和用户态。通常PSW中有一个二进制控制位控制这两种模式
处于内核态时，CPU可以执行指令集中的全部指令。在台式机和服务器上，操作系统在内核态下运行。在大多数嵌入式系统中，一部分操作系统运行在内核态，其他的部分则运行在用户态

用户程序在用户态下运行，仅允许执行部分指令，一般而言在用户态中有关IO和内存保护的所有指令是禁止的。当然，将PSW设置为内核态也是禁止的

多线程/超线程允许CPU保持两个不同的【线程】状态，在纳秒级别内来回切换（线程是轻量级进程）。比如某个进程需要从内存中读取一个字（耗费多个时钟周期），多线程CPU可以切换至另一个线程。多线程不提供真正的并行处理，即在同一时刻只有一个进程在运行，但线程的切换时间则减少到纳秒级别。注意，这里的切换都是针对线程而非进程

存储器
典型的存储层级结构如下

典型访问时间                  典型的容量
1ns             寄存器         <1kb
2ns             高速缓存        4MB
10ns            主存          1-8GB

最顶层的是CPU寄存器，它与CPU用相同的材料制成，所以和CPU一样快，典型的容量为：32位CPU中为32x32位，64位CPU中为64x64位
下一层为高速缓存，它多数由硬件控制，它被分割成高速缓存行，放置在CPU内部

IO设备
一般包括两个部分：设备控制器和设备本身。控制器是一块芯片，物理地控制设备。每类设备控制器都是不同的，所以需要不同的软件进行控制。专门与控制器对话，发出命令并接受响应的软件，称为设备驱动程序。设备驱动程序需要装入操作系统重，这样它可在核心态运行
每个设备控制器都有少量用于通信的寄存器。要激活控制器，设备驱动程序从操作系统获得一个命令，翻译成对应的值，写进设备寄存器。所有设备寄存器的集合构成了IO端口空间
在有些计算机中，设备寄存器被映射到操作系统的地址空间，这样它们可以像普通存储字一样读出和写入，不需要专门的IO指令，用户程序可以被硬件阻挡在外，防止其接触这些存储器地址
在另一些计算机中，设备寄存器被放入一个专门的IO端口空间中，每个寄存器都有一个端口地址，提供了在内核态可用的专门IN和OUT指令，供驱动读写这些寄存器

实现输入和输出的方式有三种
第一种：用户程序发出一个系统调用，内核将其翻译成对应设备驱动的过程调用，驱动程序启动IO并持续检查该设备是否完成工作（忙等），IO结束后，驱动把数据送到指定的地方（若有需要），并返回
第二种：驱动程序启动设备并让设备操作完成时发出一个【中断】，驱动程序此时返回。当驱动程序检测到设备的操作完成时，发出一个中断通知操作完成
第三种：为IO使用一种特殊的【直接存储器访问】芯片（DMA），它可以控制在内存和某些控制器之间的位流，而无须持续的CPU干预。CPU对DMA芯片进行设置，说明要传送的字节数，有关的设备和内存地址以及操作方向，然后启动DMA。当DMA芯片完成时，它会引发一个中断


