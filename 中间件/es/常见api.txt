
POST：搜索
PUT：创建

关系类比
es               mysql           备注
索引 index        表
文档 doc          一条数据        es中的文档都是json格式的
字段  field       表的字段
映射 mapping      表结构定义

进入kibana管理台方便执行
http://localhost:5601/app/dev_tools#/console

==============================基本api==============================

1.创建名为products的索引，包含name和price两个属性，name包含keyword子字段
PUT /products
{
  "mappings": {
    "properties": {
      "name": {
        "type": "text",
        "fields": {
          "keyword": {
            "type": "keyword"
          }
        }
      },
      "price": {
        "type": "double"
      }
    }
  }
}
如果创建了索引，则可以看到以下输出-
{
  "acknowledged" : true,
  "shards_acknowledged" : true,
  "index" : "products"
}


2.添加文档
向products索引里添加一个文档，该文档的 ID 为1，包含了产品的名称和价格信息。
PUT /products/_doc/1
{
  "name": "iPhone 14",
  "price": 999.99
}
返回
{
  "_index" : "products",
  "_type" : "_doc",
  "_id" : "1",
  "_version" : 1,
  "result" : "created",
  "_shards" : {
    "total" : 2,
    "successful" : 1,
    "failed" : 0
  },
  "_seq_no" : 0,
  "_primary_term" : 1
}

3. 检索文档
依据文档 ID 从products索引中获取对应的文档。
GET /products/_doc/1
返回
{
  "_index" : "products",
  "_type" : "_doc",
  "_id" : "1",
  "_version" : 1,
  "_seq_no" : 0,
  "_primary_term" : 1,
  "found" : true,
  "_source" : {
    "name" : "iPhone 14",
    "price" : 999.99
  }
}

4. 更新文档
对 ID 为1的文档进行部分更新，把产品价格修改为1099.99。
POST /products/_update/1
{
  "doc": {
    "price": 1099.99
  }
}
返回
{
  "_index" : "products",
  "_type" : "_doc",
  "_id" : "1",
  "_version" : 2,
  "result" : "updated",
  "_shards" : {
    "total" : 2,
    "successful" : 1,
    "failed" : 0
  },
  "_seq_no" : 1,
  "_primary_term" : 1
}

5. 删除文档
从products索引中删除 ID 为1的文档。
DELETE /products/_doc/1

6. 搜索文档
执行全文搜索，查找name字段中包含iPhone 14的文档。
GET /products/_search
{
  "query": {
    "match": {
      "name": "iPhone 14"
    }
  }
}
返回
{
  "took" : 7,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 1,
      "relation" : "eq"
    },
    "max_score" : 0.36464313,
    "hits" : [
      {
        "_index" : "products",
        "_type" : "_doc",
        "_id" : "1",
        "_score" : 0.36464313,
        "_source" : {
          "name" : "iPhone 14",
          "price" : 999.99
        }
      }
    ]
  }
}
备注：
match：标准全文查询，会对查询文本进行分词处理。
multi_match：多字段匹配查询，可以在多个字段上执行相同的查询。
query_string：支持更复杂的查询语法，如布尔操作符、通配符等。
simple_query_string：简化版的查询字符串，更安全，适合用户输入。


7. 精确匹配
查找name.keyword字段精确等于iPhone 14的文档。
GET /products/_search
{
  "query": {
    "term": {
      "name.keyword": "iPhone 14"
    }
  }
}

8. 范围查询
找出price字段值在500到1500之间的文档。
GET /products/_search
{
  "query": {
    "range": {
      "price": {
        "gte": 500,
        "lte": 1500
      }
    }
  }
}

9. 聚合查询
计算所有产品的平均价格。
GET /products/_search
{
  "size": 0,
  "aggs": {
    "avg_price": {
      "avg": {
        "field": "price"
      }
    }
  }
}

10. 删除索引
删除名为products的索引。
DELETE /products

11. 排序（Sort）
GET /products/_search
{
  "sort": [
    {
      "name.keyword": {
        "order": "asc"
      }
    }
  ]
}
