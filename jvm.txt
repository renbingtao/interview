
========================jvm========================

jvm内存区域

程序计数器
不会内存溢出

java虚拟机栈
线程私有，生命周期与线程相同，存储局部变量表，操作数栈，动态连接，方法出口等。每个方法被调用到执行完毕，对应这帧栈在虚拟机栈中的入栈到出栈的过程。局部变量表保存了编译期间可知的基本数据类型及对象引用和returnAddress类型。
栈深度超过允许的最大值时stack overflow，栈扩容失败时oom。hotspot不允许动态扩容，即栈空间申请成功时不会oom，但申请时可能oom

本地方法栈
hot spot将虚拟机栈和本地方法栈合二为一

java堆
-Xmx -Xms

方法区
存储类信息，常亮，静态变量等，在java8中使用元空间meta-space来实现

运行时常量池
方法区的一部分，用于保存编译期生成的各种字面量和符号引用；字面量包括文本字符串、基本数据类型的值及final的常亮。比如String str="Hello"，则"Hello"是字面量。符号引用包括类、接口的全限定名，字段名，方法名等。向运行时常量池添加内容的常见方法是String.intern()

直接内存
NIO可以使用native函数库分配堆外内存，通过堆内的DirectByteBuffer对象进行操作，避免了在java堆和native堆之间来回复制数据

对象的内存布局
对象头，实例数据，对齐填充
对象头包括对象自身运行时的数据（闭合hashcode，gc分代年龄，锁状态标志，线程持有的锁等）和类型指针

对象的访问定位
句柄：堆中划分出一个内存区域，句柄池，池中的每一条记录都包含了指向对象实例数据的指针和指向对象类型数据的指针。对象引用指向的是句柄池中的记录。
好处：稳定，若对象被移动或回收，则只需修改池中的记录，无需修改引用。坏处：多了一次访问步骤，性能差
直接指针：引用直接指向对象的地址。hotsopt默认实现

可达性分析
gc root节点包括虚拟机栈中引用的对象，类对象，常量，class对象等，有时也包含其他临时对象

强软弱虚
软，在oom之前进行回收；弱，gc时回收；虚，对象被回收时发送系统通知

跨代引用
记忆集remembered set是抽象，卡表是具体实现。卡表每一个元素为卡页，512byte。卡表元素变脏是通过写屏障实现的

标记清除
标记所有要回收的对象，然后统一回收。产生碎片，大部分对象回收时效率低

标记复制
各50%，改进811+逃生门设计

标记整理
让存活的对象向一段移动。老年代很慢

根节点枚举
虚拟机通过oopmap的数据结构直接获取哪些存在对象引用：jvm执行到特定的指令（安全点）时，会根据帧栈的状态生成对应的oopmap，记录了帧栈中哪些位置包含了引用。

安全点
选择标准为程序是否会长时间运行，一般为方法调用，循环跳转，异常跳转等

空间担保机制
minor gc时，若存活对象总和大于survivor区大小，存活对象会直接放入老年代。minor gc之前，jvm会预估存活对象总和，判断老年代最大连续空间是否大于历次minor gc存活对象平均大小或新生代对象大小总和，大于任意一个就触发minor gc，否则触发major gc。jdk7之后取消了该参数，改为固定行为

serial收集器
单线程，客户端默认的新生代收集器。优点：额外内存消耗少，适合桌面应用的场景

parNew收集器
serial的多线程并行版

serialOld收集器
serial的老年代版本，单线程，标记整理，供客户端使用

CMS收集器
标记清除，gc过程包括：初始标记，并发标记，重新标记，并发清除。初始标记是标记gc root能直接关联的对象，会stw；并发标记是从gc root对象遍历整个对象图的过程，时间较长但不会stw；重新标记会修正并发标记期间用户进程操作可能导致的标记变动，会stw；并发清除不会stw。
在并发标记和并发清除阶段，用户进程还在进行，会产生新的垃圾，因此不是老年代几乎满了时gc，而是92%（java6）时gc。若预留的空间不足以分配新对象，会出现并发失败（Concurrent Mode Failure），改用serial old进行垃圾收集

G1收集器
cms的继承人，不再基于新生代或老年代，而是衡量堆的哪块内存里的垃圾最多。g1把堆分为多个大小相等的独立空间（region），每个堆可以是eden区、survivor区，也可以是老年代，g1根据不同角色采用不同策略。
g1保留了新生代、老年代的概念，但他们是不连续的动态集合。TAMS是两个指针，preTAMS和nextTAMS。gc过程包括初始标记，并发标记，最终标记，筛选回收。初始标记：stw，标记gc root能直接关联的对象；并发标记：从gc root进行可达性分析，与用户进程同时进行，耗时较长；最终标记：stw，处理SATB记录；筛选回收：对各region的回收价值和成本进行排序，筛选回收价值最大的region集合，根据用户期望的停顿时间，选择任意多个region，将旧region的存活对象复制到空的region中。

虚拟机类加载机制
类的生命周期：加载、验证、准备、解析、初始化、使用、卸载
加载：将class文件从磁盘或网络中读取到内存
验证：保证class文件符合jvm的规范
准备：为类中的静态变量分配内存并写0。比如static int a=123，则此时a=0，但如果加上final，则a=123
解析：将常量池内的符号引用转换为直接引用
初始化：执行类构造器（clinit方法），包括类变量的赋值和static{}只能访问之前定义的变量，对于之后定义的变量，可以赋值但不能访问。语句，编译器收集的顺序取决于源文件的顺序，static{}只能访问之前定义的变量，对于之后定义的变量，可以赋值但不能访问

classLoader：判断两个类是否相等，需要这两个类是由同一个类加载器加载的前提下，即即时两个类来自同一个class文件，被同一个jvm加载，只要是不同的classloader加载，那它们就不是相等的
三层类加载器：
启动类加载器bootstrap classloader，加载java_home/lib目录下的jar包；
扩展类加载器extension classloader，加载java_home/lib/ext目录下的jar包；
系统类加载器application classloader，加载classpath下的jar包。
双亲委派模型采用组合而非继承的方式实现，不会自己加载类，而是交给父类加载，父类无法加载时才会自己去加载。

java内存模型与线程
处理器的高速缓存与主内存通过MESI协议保持一致性。java内存模型规定了所有变量都应该存储在主内存上，每个线程也可以有自己的工作内存，其中保存了被该线程使用的变量的主内存副本，线程对变量的操作都必须在工作内存中进行，而不能直接操作主内存中的数据，线程间变量值的传递都需要通过主内存来完成。java内存模型定义了8中操作：lock,unlock,read,load,use,assign,store,write。

volatile
有两个作用，一是保证变量对所有线程的可见性，即对volatile变量的写操作会立刻反应到其他线程之中，volatile变量在各个线程中是一致的；二是禁止指令重排序。

实现线程（非java线程）有三种方式：使用内核线程实现（1:1），使用用户线程实现（1:N），使用用户线程+轻量级进程混合实现（N:M）。
内核线程由内核完成线程切换，每个内核线程可以视为内核的一个分身，程序一般不会直接使用内核线程，而是使用其高级接口：轻量级进程，即通常意义上的线程，由于轻量级进程会消耗内核资源（如内核线程的栈空间），因此一个系统支持的轻量级进程是有限的。java线程的实现通常采用轻量级进程，即1:1。
用户线程称为1：N实现，用户线程的建立、同步、销毁、调度完全在用户态中完成，所有的线程操作都需要用户程序自己处理，系统内核不能感知用户线程的存在。
混合实现称为N:M实现，将内核线程与用户线程一起使用，用户线程还是在用户空间，因此用户线程的创建、切换等操作依旧廉价，而轻量级进程则作为用户线程和内核线程之间的桥梁，可以使用内核的线程调度功能及处理器映射。

线程调度的方式一般有协同式和抢占式，协同式指线程执行完任务后通知系统切换到另一个线程；抢占式由系统为每个线程分配执行时间，也是java采用的方式，java语言提供了10个线程优先级，但由于主流jvm的线程都是映射到系统的原生线程，因此调度最终还是由系统决定，且系统的优先级不一定能和java中的优先级一一对应，因此这不是一种稳定的调节手段。java定义了6中线程状态：new，runnable（包括操作系统线程状态中的running和ready，即可能运行，也可能等待分配时间片），waiting（Object.wait，Thread.join，LockSupport.park），timed waiting（Thread.sleep），blocked，terminated。

互斥同步（悲观锁）
sync关键字编译后在同步块前后形成monitorenter和monitorexit两个指令。ReentrantLock(实现了Lock接口)增加了高级功能：等待可中断，公平锁（按申请时间获取锁，影响性能），绑定多个条件。

非阻塞同步（乐观锁）
需要硬件指令集来实现，保证看起来多个操作的行为只通过一条命令即可完成。x86执行使用cmpxchg完成CAS功能。ABA问题可以通过加入版本来解决，不过总的来说比较鸡肋，ABA最好通过sync或Lock解决。

无同步方案：一个方法不涉及共享数据，天生线程安全。比如可重入代码（相同的输入，得到相同的输出），线程本地存储。

sync锁优化
自旋锁与自适应自旋：获取不到锁时不会直接挂起，而是先自旋尝试获取，无法获取才挂起；自旋的时间不是固定的，而是由上一次的自旋时间及锁的持有者的状态决定。

锁消除
一些代码加了锁，通过逃逸分析，判断堆上的数据不会逃逸出去被其他线程访问，因此去掉锁。很多锁不是程序员加上的，比如String s=String s1+String s2+String s3，JDK5之前会转换为stringbuilder.append。解释执行（java编译器生成平台无关的字节码，解释器逐句翻译成机器码）时会加锁，但服务端编译器即时编译（JIT，运行过程中将热点代码hot spot编译成机器码）后会去掉锁。

锁粗化
继续使用上面的例子，反复对一个对象加锁和解锁，甚至在循环加锁，jvm会扩大加锁范围。

锁升级
对象头的mark word字段中，有3bit（2个标志位，1个偏向位）用于表示锁的状态。进程启动后前4秒创建的对象为无锁，后4秒创建的对象为可偏向但没偏向的锁。
获取锁时，若可偏向（标志位01，偏向位1），比较当前线程id是否位markword中记录的，若是则获取到偏向锁并执行同步方法；若不是则尝试通过cas获取。cas成功时更新线程id并执行同步方法；不成功时撤销偏向位（偏向位0），锁置为未锁定（标志位01）或轻量级锁（标志位00）。
加轻量级锁先将markword的内容复制到帧栈（可理解为快照），然后通过一次cas更新markword，成功则获取到轻量级锁；失败则直接（即不会自旋）升级为重量级锁；升级到重量级锁后，先自旋一会，还是获取不到锁才会阻塞

sync和ReentrantLock的区别
sync无需手动释放锁及处理异常，lock需要释放并处理异常；sync是关键字，jvm后续版本可通过底层机制优化，lock主要通过代码实现，优化空间有限；lock可设置等待超时时间，支持公平锁（性能急剧下降），可绑定多个条件。

逃逸分析
hotspot会分析一个新对象的使用范围，决定把对象分配在堆或者栈上（不逃逸的对象可能分配在栈上）

标量替换
在逃逸分析的基础上的优化。对象由多个字段组成，这些字段可看为标量，不直接为对象分配内存，而是在栈上为标量分配空间

jvm主要组成部分
类加载子系统：根据全限定类名将class文件加载到运行时数据区
执行引擎：执行class指令
运行时数据区：平时说的jvm内存
本地接口组件：与本地库交互，是其他变成语言交互的接口

tomcat类加载机制：tomcat拓展了java类加载机制，引入了多个自定义的类加载器：
Common ClassLoader：加载tomcat本身，父类加载器是App ClassLoader
Catalina ClassLoader：加载tomcat需要的类，父类加载器是Common ClassLoader
Shared ClassLoader：加载所有Web应用共享的类和资源，父类加载器是Common ClassLoader
WebApp ClassLoader：每个应用有自己独立的WebApp ClassLoader，加载该应用自身的类，父类加载器是Shared ClassLoader
Jsp ClassLoader：每个JSP文件都有一个对应的ClassLoader，父类加载器是WebApp ClassLoader
WebApp ClassLoader打破了传统的双亲委派机制，会先自己加载，找不到时才让父类加载

========================类文件结构========================

class文件是一组以8字节为基础单位的二进制流，中间没有任何分隔符。当某数据项需要8字节以上的空间时，按照高位在前（大端对齐，比如要保存0x1234，高地址为0x12，低地址为0x34，即1234；小端对齐则高地址为0x34，低地址为0x12，即3412）的方式分割为若干个8字节进行存储。举例
offset      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
00000000    CA  FE  BA  BE  00  00  00  32  00  16  07  00  02  01  00  1D
class文件中只有两种数据类型：无符号数和表。无符号数包括u1,u2,u4,u8，表示1个字节、2个字节、4个字节、8个字节的无符号数（2个16进制的数=1个字节），可以描述数字、索引引用、数量值、UTF8编码的字符串。表由多个无符号数或其他表组成，所有表都以"_info"结尾
无论无符号数还是表，当描述集合时，都使用容量+数据项的表示形式

魔数及版本
class文件的头4个字节称为魔数，唯一作用是确定这个文件能否为一个能给jvm接受的class文件，class文件的魔数为0xCAFEBABE（咖啡宝贝）。魔数后的4字节为class文件的版本号（56字节为次版本，78字节为主版本），高版本jdk兼容低版本class，反过来不行

常量池
版本号后是常量池，可理解为class文件里的资源仓库，通常是占用class文件控件最大的数据项。常量池的入口为【u2】类型的数据，代表常量池的容量，从1而非0开始
举例：根据上面的举例，常量池的容量对应的offset为8和9，为16进制【0x0016】，即十进制的22，则常量池中有21项常亮，索引值范围是1-21。索引值=0是由特殊含义的。只有常量池是从1开始计数，其他集合都是从0开始
常量池中主要存放两种类常亮：字面量和符号引用。字面量比较接近java语言中的常亮，比如文本字符串、final的常亮。符号引用则包括以下类常亮：被模块导出或开放的包、类和接口的全限定名、字段的名称和描述符、方法的名称和描述符、方法句柄和方法类型、动态调用点和动态常亮。jvm在加载class文件时才会动态连接，即上面的符号应用需要经过jvm加载才能变为真正的内存入口地址
常量池有17种常亮，每一种常亮都是一个表，表结构的第一个位是u1类型的标志位，代表当前表保存哪种数据类型
举例：
类型                      标志      描述
CONSTANT_Utf8_info          1       UTF8编码的字符串
CONSTANT_Integer_info       3       整形字面量
CONSTANT_Float_info         4       浮点型字面量
...
CONSTANT_Class_info         7       类或接口的符号引用
...
CONSTANT_Package_info       20      表示一个模块中开放或导出的包
部分标志位不存在（比如2），一共17个。这17中类型有着完全独立的数据结构，两两之间没有共性
现在看第一项常量，它的offset为A，值为0x07，对应的类型为CONSTANT_Class_info，即类或接口的符号引用。该类型的结构如下
类型      名称          数量
u1        tag           1
u2        name_index    1
tag是标志位，用于区分常亮类型；name_index是常量池的索引值，指向一个utf8类型的常亮，表示这个类或接口的全限定名，本例中为【0x0002】，也就是常量池中的第二项，继续查找第二项，它的标志位是【0x01】，是UTF8类型，其结构如下
类型      名称          数量
u1        tag           1
u2        length        1
u1        bytes         length
length值说明该UTF8编码的字符串的长度，后面是用utf8缩略编码表示的字符串，长度为length。缩略编码和普通utf8编码的区别是，\u0001到\u007f（0-127的ASCII码）之间的字符的缩略编码使用一个字节表示；\u0080到\u07ff之间的字符的缩略编码用两个字节表示；\u0800到\uffff之间的字符，缩略编码按普通utf8编码的三字节表示。u2最大值为65535（2个字节，256的平方），也是方法、字段名的最大长度。本例的length地址为E和F，即【0x001D】，29个字节
 可以使用javap -verbose XXX来查看字节码内容

访问标志
常亮池后，紧接着的2个字节代表访问标志（access_flags），用于识别一些类或者接口层次的访问信息，包括：这个class是类还是接口，是否为public，是否为abstract，如果是类是否为final等。access_flags一共有16个标志位，目前只定义了9个，示例
ACC_PUBLIC  0x0001      是否为public
ACC_FINAL   0x0010      是否为final，只有类可以设置
ACC_SUPER   0x0020      jdk1.0.2之后默认为真
我们定义一个普通的TestClass类，则ACC_PUBLIC=真且ACC_SUPER=真，故标志位=0x0001|0x0020=0x0021

类索引、父类索引、接口索引集合
类索引(this_class)和父类索引(super_class)都是u2类型的数据，接口索引集合(interfaces)是一组u2类型的数据的集合，由这三项确定该类型的继承关系。放在访问标志后。类和父类指向CONSTANT_Class_info，全限定名定义在CONSTANT_Utf8_info中；接口集合的第一项u2为容量

字段表集合
字段表(field_info)用于描述接口或类中声明的变量。java中的字段包括类级别和实例级别，但不包括方法内部声明的局部变量。字段表的结构如下
类型                名称                数量
u2                  access_flags        1
u2                  name_index          1
u2                  descriptor_index    1
u2                  attributes_count    1
attribute_info      attributes          1
字段修饰符在access_flags中，与类的access_flags非常相似，是u2，部分示例如下
ACC_PUBLIC  0x0001
ACC_PRIVATE 0x0002
name_index和descriptor_index是对常量池项的引用，代表字段的简单名称以及字段和方法的描述符
全限定名是"org/fenixsoft/clazz/TestClass"，即把类的全名中的"."改成了"/"，并一般在最后加上";"表示结束；简单名称则是没有类型和参数修饰的方法的字段名
描述符则是用于描述字段的数据类型、方法的参数列表（数量、类型、顺序）和返回值。基本数据类型及void都用一个大写字符表示，对象类型则用L加对象的全限定名表示，示例如下
B   byte
C   char
...
V   void
L
对于数组，一维整形数组int[]被记录为"[I"，二维字符串数组被记录为"[[Ljava/lang/String;"
用描述符描述方法时，前面是参数列表，后面是返回值。举例：方法void inc()的描述符为"()V"，方法java.lang.String toString()的描述符为"()Ljava/lang/String"
descriptor_index之后跟随着一个属性表集合，用于存储一些额外的信息。举例：final static int m = 123，则可能存在一项名为ConstantValue的属性，值指向常亮123
字段表集合汇中不会出现父类或父接口中继承来的字段

方法表集合
方发表和结构和字段表几乎一样，包括access_flags,name_index,descriptor_index,attributes。方法里的代码，经过编译后保存在方法属性表集合中名为"Code"的属性中
方法表集合中可能出现编译期自动添加的方法，最常见的就是类构造器<clinit>()方法及实例构造器<init>()方法

属性表集合
Class文件、字段表、方法表都可以携带自己的属性表集合，以描述某些场景专有的信息。对每一个属性，它的名称都要从常量池中引用一个utf8类型的常量来表示，而属性值的结构则是完全自定义的，只需要通过一个u4的长度属性去说明属性值所占用的位数。属性表结构如下
类型      名称                      数量
u2        attribute_name_index      1
u4        attribute_length          1
u1        info                      attribute_length
Code属性：java程序方法体里的代码经javac编译后，变为字节码指令存储在Code属性内。接口或抽象方法不存在Code属性。Code属性表的结构及作用，过于复杂，跳过

========================虚拟机字节码执行引擎========================

执行引擎是java虚拟机核心的组成部分之一，虚拟机的执行引擎由软件实现，这点和物理机的执行引擎（基于处理器、指令集、操作系统等）区分
在不同的虚拟机的实现中，执行引擎在执行字节码时，通常都会有解释执行和编译执行，也可能两者兼备，也可能多个不同级别的即时编译器一起工作。但从外观来看，虚拟机的执行引擎的输入输出都是一致的：输入的是字节码，处理过程是字节码解析执行的等效过程，输出是执行结果

运行时帧栈结构
虚拟机以方法作为最基本的执行单元，帧栈（Stack Frame）是方法调用和执行背后的数据结构，存储了方法的局部变量表、操作数栈、动态连接和方法返回地址等信息，每一个方法从调用开始到执行结束，都对应着一个帧栈在虚拟机栈里入栈到出栈的过程。在编译时，帧栈需要多大的局部变量表，需要多深的操作数栈都已经被分析出来，并写入到方法表的Code属性中，即一个帧栈需要多少内存，不会受运行时数据的影响，仅取决于源码及虚拟机的实现细节。对于执行引擎，同一时刻同一引擎只有位于栈顶的方法才是在运行的，只有位于栈顶的帧栈才是生效的，称为“当前帧栈”，其关联的方法称为“当前方法”

局部变量表
存放方法参数和方法内部定义的局部变量。容量以变量槽（variable slot）为最小单位，一般为32位。每个变量槽都应该能保存8种数据类型（boolean，byte，char，short，int，float，reference，returnAddress），注意jvm的基本数据类型不要和java的基本数据类型混淆，它们本质是不一样的。前6种可以参考java的基本数据类型。reference表示对一个对象实例的引用，可以通过它来直接或间接找到对象在堆中数据存放的起始地址或索引，也可以通过它来查找到对象所属数据类型在方法区中存储的类型信息。returnAddress已经很少见了，曾经被古老的虚拟机用来处理异常跳转，现已全改为异常表
对于64位的数据类型，jvm使用高位对齐的方式分配两个连续的变量槽。java中64位的数据只有long和double
jvm通过索引定位的方式使用局部变量表，索引值的范围从0-局部变量表最大的变量槽数。若访问32位数据类型的变量，索引N表示使用第N个变量槽，若访问64位数据类型的变量，则会同时使用第N和N+1两个变量槽
方法被调用时，jvm使用局部变量表来完成参数值到参数变量列表的传递过程，即实参到形参的传递
如果局部变量定义了但没有赋初始值，那它是不能使用的，比如{int a;sout(a);}。上述代码在C和C++中是可以运行的

操作数栈
也称为操作栈，是后入先出栈，用于保存操作数。操作数栈的最大深度也写入Code属性的max_stacks中。操作数栈的每一个元素可以是包括long和double在内的任意java数据类型，32位数据类型占栈容量为1，64位数据类型占栈容量为2，javac编译器保证方法执行的任何时候，操作数栈的深度都不会超过最大值max_stacks
在方法刚执行时，操作数栈为空，随着方法的执行，各种字节码指令会向操作数栈写入和提取内容，即出栈和入栈。比如做整数加法iadd时，该指令要求操作数栈最接近栈顶的两个元素已保存了int型数值，执行指令时，会把两个int值出栈并相加，然后将结果入栈

动态连接
每个帧栈都包含一个引用，该引用指向运行时常量池中该帧栈所属方法，持有引用是为了支持方法调用过程中的动态连接

方法返回地址
方法执行后，只有两种方式退出这个方法。第一种是执行引擎遇到任意一个方法返回的字节码指令，称为“正常调用完成”；另一种是方法执行的过程中遇到了异常，且没有在方法体内处理，称为“异常调用完成”，不会给上层调用者任何返回值。无论哪种方式退出，都必须返回到最初方法给调用时的位置。方法返回时可能需要在帧栈中保存一些信息，来帮助恢复上层主调方法的执行状态。方法正常退出时，主调方法的PC计数器的值就可以作为返回地址，帧栈中很可能保存这个计数器；方法异常退出时，返回地址是通过异常处理表来确定，帧栈中一般不会保存这部分信息。方法退出的过程实际上等同于把当前帧栈出栈

方法调用
方法调用并不等同于方法中的代码被执行，该阶段的唯一任务就是确定被调用方法的版本，即调用哪个方法，暂时不涉及方法内的具体运行

解析
所有方法调用的目标方法在class文件里都是一个常量池中的符号引用，在解析阶段，会将其中的一部分符号引用转化为直接引用。这种解析能成立的前提是，程序运行前方法已经有一个可确定的调用版本，且该调用版本在运行期是不可变的，即调用目标在编译时已经确定下来，这类方法的调用被称为解析。符合“编译器可知，运行期不变”特性的方法，主要是静态方法和私有方法，这两种方法都不可能通过继承或别的方式重写，因此适合在类加载阶段进行解析
jvm支持5条方法调用的字节码指令，如下
invokestatic        调用静态方法
invokespecial       调用实例构造器<init>()方法、私有方法、父类中的方法
invokevirtual       调用所有虚方法，包括final方法（历史原因）
invokeinterface     调用接口方法，在运行时再确定一个实现接口的对象
invokedynamic       由用户决定
能被前两个指令调用的方法，都可以在解析阶段确定唯一的调用版本，即4种方法，再加上final方法，共5种方法，在类加载时就可以把符号引用转换为直接引用。这些方法也称为"非虚方法"，其他的就称为"虚方法"

分派
方法调用的另一种形式就是分派（dispatch），可分为静态和动态，也可分为单分派和多分派，故共4种情况

静态分派，先看示例
public calss StaticDispatch{
    static abstract class Human{}
    static class Man extends Human{}
    static class Woman extends Human{}
    public void say(Human guy){sout("hello,guy");}
    public void say(Man guy){sout("hello,man");}
    public static void main(String[] args){
        Human human = new Man();
        StaticDispatch sr = new StaticDispatch();
        sr.say(human);
    }
}
上述代码输出hello,guy。其中Human human = new Man();中，Human为静态类型，或外观类型，Man为实际类型，或运行时类型
Human human = (new Random()).nextBoolean()?new Man():new Woman();
sr.say((Man) human);
观察上面的例子，human的实际类型是不确定的，只有运行时才知道；静态类型是完全确定的，即时强转了也是可知的。jvm（准确来说是编译器）在重载时是通过参数的【静态类型】而非实际类型来作为判断依据，是在编译阶段就确定的。所有依赖静态类型来决定方法执行版本的分派动作，都称为静态分派，最典型应用表现就是方法重载

动态分派
与重写有密切的关系。子类重写父类方法，父类引用指向了子类对象，父类引用调用方法时，实际是调用子类的重写方法。查看class文件，发现字节码指令为invokevirtual，该指令的过程大致如下
1.找到操作数栈顶的第一个元素所指的对象的【实际类型】，记为C
2.若C中找到对应的方法（描述符和简单名称都相符），则进行访问权限校验，通过则返回方法的直接引用，查找过程结束；否则返回java.lang.IllegalAccessError
3.按照继承关系从下到上依次对C的各个父类进行执行第二步
4.始终找不到合适的方法，抛出java.lang.AbstractMethodError
这就是java方法重写的本质，这种运行期根据实际类型确定方法执行版本的分派过程称为动态分派
java中指存在虚方法，不存在虚字段，即字段不参与多态，某方法访问某字段时，该字段是那个类能看到的字段。当子类声明了和父类相同的字段时，虽然在子类的内存中两个字段都存在，但子类会屏蔽父类的同名字段

单分派与多分派
方法的接收者（即被调用方）和方法的参数都称为方法的宗量，根据分派（包括静态和动态）基于多少种宗量，可以把分派划分为单分派和多分派
java的静态分派属于多分派，有两个宗量（接收者的静态类型和参数的静态类型）
java的动态分派属于单分派，有一个宗量（接收者的实际类型）
综上，java是静态多分派，动态单分派的语言

动态分派的实现
为了避免动态分派时频繁搜索目标方法，jvm在方法区中建立了虚方法表，来代替元数据查找以提高性能（invokeinterface对应的是接口方法表）
虚方法表中保存着各个方法的实际入口地址，若子类没有重写父类的方法，则子类的虚方法表中的地址入口和父类是一致的。比如Son extends Father，则wait、notify等方法和Object中的方法是同一地址
若子类重写了父类的方法，则子类的虚方法表的地址会替换为子类实现版本的地址
具有相同签名的方法，在子、父类的虚方法表中具有相同的索引序号。当实际类型变换时，只需要变更虚方法表，就可以找到需要的入口地址
虚方法表一般在类加载的【连接】阶段进行初始化，准备了类变量的初始值后，虚方法表会一同初始化

========================前端编译与优化========================

java的编译期可能包括三种：
前端编译器，举例JDK的javac
即时编译器，举例HotSpot虚拟机的C1、C2编译器
提前编译器，举例JDK的Jaotc
这里仅讨论第一种。javac几乎没有做什么优化，jvm团队把优化放在了即时编译器，这样那些不是由javac产生的class文件（比如JRuby，Groovy等语言的class文件）也能享受到优化的红利。javac编译器内容较多，我只截取部分

语法糖
也称糖衣语法，指在计算机语言中添加某种语法，对语言的编译结果和功能没有实际影响，但能方便程序员使用该语言，一般来说能减少代码量，增加代码可读性。java属于低糖语言，即比较啰嗦。java常见的语法糖包括泛型、变长参数、自动拆装箱等，jvm运行时不支持这些语法，在编译时将它们还原成原始的语法结构
泛型
本质是参数化类型或参数化多态的应用，即可以将操作的数据类型指定为方法签名中的一种特殊参数，能够用在类、接口、方法的创建中。java选择的泛型实现方式为"类型擦除式泛型"，c#采用的是"具现化式泛型"。java泛型只存在于源代码中，在编译后的字节码文件中，全部泛型都被替换成了原来的裸类型（Raw Type），并在相应的地方进行强转，即运行期的List<Integer>与List<String>是同一个类型。裸类型指所有该类型泛型化实例的共同父类型
java泛型的缺点
1.不支持基本数据类型，需要频繁拆装箱，性能差
2.运行期无法获取到泛型类信息（通过方法表中新增signature属性保存泛型信息来解决）
3.编译期泛型被擦除，可能导致编译失败。举例
public void test(List<String> list)
public void test(List<Integer> list)
上面的代码编译失败，因为泛型擦除后，它们有了相同的特征签名

========================后端编译与优化========================

这里的后端编译指把class文件转换成与本地基础设施相关的二进制机器码
主流的jvm（HotSpot，OpenJ9）内部都同时包含了解释器与编译器。当程序需要快速启动执行时，解释器可以省去编译时间，立即执行；随着时间的推移，编译器逐渐发挥作用，发现某些代码频繁运行，认定它们为热点代码，将它们编译成本地机器码，获得更高的执行效率。当物理机器的内存较小时，使用解释器可以节约内存，反之可以提高效率
HotSpot内置了2个JIT，为客户端编译器（C1）和服务端编译器（C2）。在分层编译的工作模式出现之前，HotSpot采用解释器与其中一个编译器直接搭配的方式工作，具体选择哪个编译器，取决于jvm运行的模式（模式取决于自身版本与宿主机硬件条件，用户也可通过-client或-server来强制指定）
解释器与编译器搭配使用的方式被称为混合模式（mixed mode），可以指定-Xint强制使用解释模式，此时编译器不工作，也可以使用-Xcomp强制使用编译模式，此时优先使用编译器，编译器无法处理时会使用解释器

JIT编译本地代码需要时间，解释器可能需要收集监控性能信息，为了在启动速度和效率之间达到平衡，jvm划分了不同的编译层次，包括：
第0层：纯解释执行，且解释器不开启性能监控
第1层：使用客户端编译器，不开启性能监控
第2层：使用客户端编译器，监控有限信息，比如方法及回边次数统计
第3层：使用客户端编译器，开启全部性能监控，除了第二层，还包括分支跳转、虚方法调用版本等
第4层：使用服务端编译器，会启用更多编译耗时更长的优化，还会进行一些不可靠的激进优化

编译对象与触发条件
热点代码包括：1.被调用多次的方法 2.被多次执行的循环体。对于这两种情况，编译的目标对象都是整个方法体（第二种情况编译时会传入执行入口点的字节码序号）。由于编译发生在方法执行的过程中，因此被称为栈上替换，即方法的栈帧还在栈上，方法就被替换了
判断是否为热点代码，有两种方式：1.基于采样的热点探测（J9） 2.基于计数器的热点探测（HotSpot）
HotSpot为了实现热点技术，为每个方法准备了两个计数器：方法调用计数器和回边计数器（循环边界往回跳转）
方法调用计数器
以客户端为例。方法调用时，计数器+1，若两个计数器的和达到方法调用计数器阈值（在服务端模式下为1w次），触发即时编译
默认情况下，执行引擎不会同步等待编译完成，而是继续解释执行，编译完成后，方法的调用入口地址会被替换成新的地址
默认情况下，方法调用计数器统计的不是方法被调用的绝对次数，而是一段时间内的次数，当这段时间过了，但仍未达到阈值，则方法调用计数器次数减半，称为【热度衰减】，是在gc时顺带完成的
回边计数器
统计方法中循环体回边（字节码中控制流向后跳转的指令）的次数。遇到回边指令时，计数器+1，若两个计数器的和达到方法调用计数器阈值（在服务端模式下为10700次），提交一个栈上替换编译请求，把计数器的值调低一点（保证继续用解释器执行）。没有热度衰减，即统计绝对次数

编译器优化技术
客户端和服务端的编译过程是有区别的，这里只看服务端的。它会做大部分经典的优化动作，比如：无用代码消除，循环展开，循环表达式外提，消除公共子表达式，常量传播，基本块重排序。还会做java语言相关的优化，比如：范围检查消除，空值检查消除。即时编译是一个jvm最能体现技术水平也是最复杂的部分，我们挑选几个有代表性的优化技术
方法内联
最重要的优化技术，可以说没有之一，被称为优化之母，除了消除方法调用，更是为其他优化手段建立了基础。方法内联即把目标方法“复制”到调用方法中，避免发生真实的方法调用
但在java中却远没有想象的容易：只有invokespecial（私有方法、实例构造器、父类方法）、invokestatic（静态方法）和final修饰方法可以在编译期进行解析。对于虚方法，编译器静态地做内联是很难确定使用哪个版本的，只有实际运行才能确定
为了解决该问题，jvm引入了【类型继承关系分析】（CHA）技术，用于确定已加载的类中，接口是否有多个实现，类是否存在子类，子类是否覆盖父类的虚方法等
在内联虚方法时，向CHA查询是否存在多个版本，若只有一个则进行内联，这种内联称为“守护内联”。由于java程序是动态连接的，随时可能加载新的类型，这种内联属于激进预测性优化，必须预留好“逃生门”。程序在后续的执行过程中，jvm没有加载新的类，则内联优化的代码可以一直使用；若加载了新的类导致继承关系发生变化，则退回到解释执行，或重新编译
若通过CHA查询出来的结果是方法确实存在多个版本，则JIT会尝试使用【内联缓存】来进行优化：在目标方法入口前建立一个缓存，一开始缓存为空，第一次调用后，缓存记录下方法接收者的版本信息，后续每次调用时都比较接收者的版本：若一致，则此时它是【单态内联缓存】，此时比起用不内联的非虚方法调用，仅多了一次类型判断的开销；若不一致，说明程序用到了虚方法的多态，此时退化成【超多态内联缓存】，开销相当于真正查找虚方法表。大多数情况下方法内联都是一种激进优化
单态内联缓存是以调用点为粒度，举例：
Animal animal = new Cat();
animal.eat();
animal = new Dog();
animal.eat();
这两次是eat是用同一个调用点
Animal animal = new Cat();
animal.eat();
Animal animal2 = new Cat();
animal2.eat();
这两次是eat是用同一个调用点
Animal animal = new Cat();
animal.eat();
Cat cat = new Cat();
cat.eat();
这两次是eat是不同的调用点
综上，判断不同的方法调用是否为同一调用点，只看对象的静态类型。第一次调用，会实际调用，并记录调用对象的实际类型和方法的版本；后续调用，检查调用的对象和之前的对象的实际类型是否相同，相同则命中【单态内联缓存】，直接从缓存中获取方法的版本

逃逸分析
分析对象动态作用域，当一个对象在方法里被定义后，它可能被外部方法引用，比如作为参数传递到其他方法中，这种称为方法逃逸
可能被外部线程访问到，比如赋值给实例变量，该变量可以被其他线程访问，称为线程逃逸
从不逃逸-方法逃逸-线程逃逸，称为对象由低到高的不同程度逃逸。若能证明一个对象不会逃逸或逃逸程度较低（只逃逸方法但不逃逸线程），则可能进行不同程度的优化：
栈上分配：垃圾回收要消耗大量资源，若确定一个对象不会逃逸出线程，在栈上分配内存，随着方法结束，大量对象就自动销毁了，gc系统的压力会小很多。栈上分配可以支持方法逃逸，但不支持线程逃逸
标量替换：若一个数据已经无法被分解成更小的数据来表示，则可称为标量，比如int、long及reference（对象的地址，而非对象）。相对的，若一个数据可以继续分解，则称为聚合量，比如对象。若逃逸分析证明一个对象不会被外部方法访问，且对象可以被拆散，则程序可能不会创建对象，而是创建它的成员变量来替换。标量替换为栈上分配的一种特例，要求对象不逃逸出方法
同步消除：若逃逸分析能确定一个变量不会逃逸出线程，无法被其他线程访问，则对该变量的加锁可以消除
jdk7时服务端编译器默认开启逃逸分析
栈上分配不是直接拓展栈空间，而是通过标量替换来实现的，复用编译时预留的局部变量表空间。若局部变量表空间有限，jvm可能放弃栈上分配。开启逃逸分析不会导致栈溢出

公共子表达式消除
经典、普遍用于各种编译器的优化技术，含义：若一个表达式E已经被计算过，且从计算到现在，E中所有变量值都没有改变，则E的再次出现称为公共子表达式
举例：int d=(c*b)*12+a+(a+b*c)，javac不会做任何优化，但JIT会进行优化：检测到c*b与b*c是同样的表达式，且计算期间b和c的值都不变，所以可能被优化成：int d=E*12+a+(a+E)。此外，编译器还可能进行代数简化，结果为：int d=E*13+a+a
