
========================数据库及mysql========================

一致性
事务执行前后，数据库的完整性没有遭到破坏。可理解为逻辑上保持正确，比如转账后余额不能小于0，转账前后双方余额总额一致。

可重复读
事务多次读取同样的记录，结果是一致的，解决了不可重复度，但无法解决幻读问题。

幻读
可重复读及以下的隔离级别下，事务多次进行范围读取，返回的行数不一致（其他事务插入数据并提交）。mysql通过间隙锁解决了幻读的问题。

不可重复度和幻读的区别
比如查询某条数据，可重复读的结果都是一致的，即解决了不可重复度；但统计数据总数，两次统计之间有数据插入，则统计到的结果不同，即发生了幻读

事务日志
存储引擎修改表数据时修改内存中的拷贝，再把修改行为记录到硬盘的事务日志中，采用追加的方式，顺序IO。事务日志持久化后，内存修改的数据再慢慢刷回磁盘，也成为write ahead log，修改数据要写两次磁盘。

隐式和显式锁定
innodb可以在事物执行中随时锁定，只有提交或回滚时才会释放锁，且所有的锁都是同一时刻释放，可以用select xx lock in share mode或select xx for update显式加锁。begin及commit只影响是否手动开启事务，不影响锁，手动开启事务中select默认也是不加锁

范式
1.每个列不可再分割，比如“电话邮箱”列可继续分割，不符2.非主属性完全依赖于主键，而不是主键的一部分，比如主键为省+市，则省级单位只依赖于省而不依赖于市，不符3.非主属性不传递依赖于主键，比如A唯一确定B，B唯一确定C，ABC在同一张表中则不符。举例：市唯一确定省，省唯一确定国，则市、省、国放在同一张表内是不符的，因为国会冗余，应拆分为市省表+省国表

锁
mysql按排他性可分为读锁、写锁、意向写锁和意向读锁，按粒度可分为自增锁、元数据锁、表锁、记录锁（record lock）、间隙锁（gap lock）、临键锁（next-key lock）等
间隙锁唯一的作用是阻止其他事务向间隙中插入数据，即幻读，所以不区分共享或者排他，功能也是一致的；临键锁为记录锁和间隙锁的组合
可以在performance_schema.data_locks、show engine innodb status查看事务持有锁的情况

读已提交时
不需要防范幻读，所以gap锁不生效，则next-key lock也不生效。使用快照读，查询不到数据时只会加表级意向锁；查询到数据时在索引及主键上加记录锁REC_NOT_GAP

可重复读时
都会在表上添加意向锁，在主键加记录锁（S,REC_NOT_GAP或者X,REC_NOT_GAP），故下文省略，主要考察对索引加锁
索引等值查询：值存在时，索引加REC_NOT_GAP锁；值不存在时，在索引上加gap锁，比如索引值为2和5，查询索引值为4的数据时，2-5这个区间会加上gap lock，另一个事务插入索引值为3的数据时会阻塞
索引范围查询：在索引上加临键锁（S或者X），包括前后索引值也会加

两阶段锁定
事务执行期间，随时都可以获取锁，但锁只有在提交或回滚后才会释放，且所有锁都会释放

当前读
select for update/share，insert、update等，会加锁
快照读
select MVCC非阻塞式读

每个事务在第一次增删改查（注意包括查）任何数据时分配一个事物ID，即trx_id

MVCC
行级锁的变种，RC和RR生效，用于保证隔离性。由三部分组成：隐藏字段、undo版本链、readview
隐藏字段：主要包括操作这条数据的事务id（trx_id）和指向该数据前一个版本的指针（事务修改记录时，向undolog写入一条记录，记录如何恢复，事务的回滚指针指向该undolog）
undolog版本链：同一条数据的不同版本组成的链条，在undo log中维护
readview：用于控制具体选择哪个版本，包含：当前活跃的事务id集合、预分配事务id，即当前最大事务id+1，max_trx_id、最小活跃事务id，min_trx_id、readview创建者的事务id。
在判断数据可见性时，从最新一条开始，根据数据访问规则检查该版本的数据是否可见，可见则返回，不可见则递归地查看上一版本。
版本链的数据访问规则：1.当前事务id==readview创建者的事务id时，可见2.当前事务id<最小id，可见3.当前事务id>最大id，不可见4.当前事务id在最大最小之间（min<=tx<=max），如果在活跃事务id集合，说明当时事务还未提交，不可见，否则可见。
RR使用mvcc不能完全避免幻读。连续多个快照读，readview复用，不会幻读；但如果在快照读之后使用当前读，readview会在当前读时重新生成，产生幻读。

三大日志
undo log、redo log、bin log。bin log是mysql服务器层保存的，另外两个是innnodb特有的。

优化数据结构
尽量避免保存null，如果查询中包含可为null的列，则索引、索引统计和值比较更复杂，使得mysql更难优化。更小的通常更好。简单为好，比如使用mysql内置的时间格式而不是字符串
整数类型：tinyint,smallint,mediumint,int,bigint，他们使用8-64位的存储空间。可以指定整数的宽度，但只是影响显示字符的个数，对于计算和存储没有影响
字符串类型：VARCHAR使用1或2个字节保存字符串长度；CHAR在保存时会删除所有末尾的空格
BLOB和TEXT的唯一区别是BLOB保存二进制，没有排序规则或字符集，但TEXT有
DATETIME是没有时区的

索引类型
B+ tree；自适应哈希索引，innodb发现某些索引值被频繁访问时，会在原有b+树索引之上，再建一个哈希索引，这个过程是完全自动化，用户无法控制或配置，但是可以关闭该特性
三星系统评价：若索引将相关记录放在一起则为一星；若索引中的数据顺序和查找中的排列顺序一致则二星；若索引中的列包含查询需要的全部列则为三星
索引的选择度：不重复的索引值/记录总数，范围从1/t到1之间，越大则查询效率越高。但只看平均选择度是不够的，因为数据分布可能是不均匀的
前缀索引：只对字段的前一部分字符进行索引。前缀长度的选择，可以先计算列的选择度，然后逐步加大前缀的长度，使得前缀的选择度接近列的选择度
索引合并：一定程度上使用表的多个单列索引定位指定行，有三个变种：OR的联合，AND的相交，前两种的组合。以where a=xx or b=xx为例，explain的extra列中会显示Using union(idx_a,idx_b)；

主键
若没有定义主键，innodb会选择非空唯一索引来代替，若没有，会隐式定义一个主键
何时不适合主键顺序插入：高并发场景，按主键顺序插入（手动指定主键）可能造成写入竞争，主键的上界成为热点，导致gap lock的竞争。注意这里不是主键自增

AUTO_INCREMENT锁模式
参考mysql官方文档，innodb插入语句涉及到自增列，大概分为以下几种：
"INSERT-like":包含所有能够插入数据的sql，比如inset,insert ... select,replace,replace ... select,load data。包括"simple-inserts","bulk-inserts","mixed-mode"
"Simple inserts":能够确定插入条数的sql，比如单行或多行insert/replace，不包含INSERT... ON DUPLICATE KEY UPDATE
"Bulk inserts":不能够确定插入条数的sql，比如insert ... select,replace ... select,load data，不包含普通的insert。这种情况下，innodb会在处理每一行时分配自增值
"Mixed-mode inserts":部分数据的条数可以确定，部分不能确定。比如INSERT INTO t1 (id,c2) VALUES (1,'a'), (NULL,'b'), (5,'c'), (NULL,'d');部分id为null，由系统分配，部分是手动分配。再比如INSERT ... ON DUPLICATE KEY UPDATE，最坏情况下，它先执行插入，再执行更新，更新阶段可能使用自增值，也可能不使用
innodb_autoinc_lock_mode参数有以下几种值
0，传统模式。在innodb_autoinc_lock_mode参数引入前，采用这种模式。在该模式下，所有"INSERT-like"语句都会获取一个特殊的表级锁（AUTO-INC lock），该锁会保持到语句的结束，而非事务的结束。对于给定的一系列插入sql，产生的自增值是可预测且重复的。在基于statement的复制模式中，副本产生的自增值和源服务器是相同的，多个insert执行的结果是确定的，副本的数据和源服务器保持一致。同时执行多个insert时，只能执行一个insert语句，其他语句都会阻塞，这也会限制并发插入时的性能
1，连续模式，8.0之前的默认值。在该模式下，Bulk inserts使用AUTO-INC lock，直到sql结束。Simple inserts没有使用AUTO-INC lock，而是使用互斥锁（轻量级锁），互斥锁仅在生成自增值时获取，生成后释放，而非在语句结束时释放，但如果其他事务持有AUTO-INC lock，当前事务也会被阻塞。总的来说，这种模式显著提高了性能，且基于statement的复制仍然安全，但有一个例外，就是Mixed-mode inserts，在该情况下，innodb会分配比需要的行数更多的自增值，由于所有自动分配的值都是连续的，因此多余的值会被丢失
2，交错模式，8.0之后的默认值。8.0修改了默认值，是因为binlog的默认格式由statement改为了row：statement模式下，需要采用连续的自增锁模式，以保证同样的sql能产生同样的自增值；row模式下则不受sql语句执行顺序的影响
在该模式下，任何INSERT-like都不会使用AUTO-INC lock，而是使用互斥锁。多个语句可以并发执行，性能最高，但基于statement的复制不安全
多个语句可以同时生成自增值，即自增值的分配是在多个语句之间可能是交错进行的。同理，Simple inserts生成的自增值是连续的，Bulk inserts生成的自增值可能不连续，innodb会分配一个范围，从这个范围内获取自增值，范围用完后，向innodb申请新的范围

自增计数器的更新规则
当设置主键自增（AUTO_INCREMENT）时，其自增规则取决于当前自增计数器的值
show create table中会显示下一个自增值(比如AUTO_INCREMENT=4，则代表新增的下一条数据的id=4)。如果手动插入一条id=8的数据，则自增计数器会更新为9
自增计数器的更新规则是 “取当前表中最大 ID 与计数器当前值的较大者，再加 1”。手动插入更大的 ID 会强制计数器更新，确保后续自增 ID 不会重复。

排序
mysql有两种方式生成有序结果：排序操作，或者按索引顺序扫描。type列为index，则使用了索引扫描，extra列包含Using filesort，则进行了排序，内存够时在内存中排序，内存不足时将数据分为很多小部分，每个部分排序然后保存在磁盘，然后合并。排序时会申请行数据的最大空间，比如varchar按最大长度，utf8mb4按4字节申请。如果索引包含a，b，则order by a desc,b desc的extra包含Backward index scan

叶子节点
聚集索引包含主键列、事务ID、回滚指针、剩余列；二级索引包含主键值

行转列
case when

explain
type值包含eq_ref（主键或唯一索引等值查询）ref（非唯一索引等值查询）range（索引范围查询）index（全索引扫描）ALL（全表扫描）；key_len可用于判断索引的使用情况；extra包含using index；实际执行explain analyze

DDL会隐式提交事务

分布式事务
包括XA，TCC，最终一致性等。

XA：是一种协议，定义了事务协调者和局事务参与者的接口。
二阶段提交把整个事务提交分为prepare和commit两个阶段。一阶段：协调者向参与者发送prepare请求，参与者收到请求后执行事务但暂时不提交，并回复是否可以提交事务。二阶段：只有所有参与者都回复可以提交时，协调者才发送提交命令，任一参与者不允许提交或回复超时，协调者都发送回滚请求。
三阶段：引入了超时机制。在prepare前多了一个询问阶段，即询问参与者是否可以执行事务，参与者会检查自身状态，比如资源是否充足等。
优缺点：严格遵循ACID原则，保证强一致性；广泛应用，主流数据库都支持XA协议；开发便捷，程序员按照XA的接口定义事务即可。性能差，对资源进行锁定；协调者存在单点故障，比如第一阶段成功，协调者在发出提交命令前宕机，则所有服务的资源都被锁定，一直等待。

TCC由一系列子事务组成，每个子事务都需要实现try-confirm-cancel三个接口。一阶段try进行资源锁定，不是数据库层面而是业务层面的锁定。二阶段confirm真正执行业务，处理try阶段预留的资源，confirm要求实现幂等，失败后重试。三阶段cancel释放try阶段预留的资源，同理要满足幂等。
举例：AB都有100元，A给B转账30元。try：检查A余额是否大于30元，大于则冻结30余额。所以其他事务查询AB的余额还是100元。confirm：设置A的余额为70，冻结余额清空，B的余额为130。cancel：A的冻结余额清空
在事物执行期间，其他事务如果要并发修改A的余额，需要查看冻结余额，比如A只有70元是可用的。或者干脆不允许其他事务修改余额
优缺点：并发程度高，不需要在数据库层面锁定资源。对业务有入侵性，需要实现三个接口并保证幂等

最终一致性方案：适用于资源不需要回滚，只需要一致性的情景，比如数据清理。通过不断重试最终完成，实现弱一致性

一条sql的执行过程
1.使用连接器，通过客户端与mysql服务端建立连接，并校验权限
2.8.0之前检查是否开启缓存，命中则直接返回
3.由解析器进行语法解析，生成解析树，并检查表、列等是否存在
4.由优化器生成执行计划
5.由执行器来执行sql，具体来说由存储引擎来执行sql

innodb一次更新事务的过程
1.把记录读取到buffer pool中
2.写入undo log buffer（内存），记录更新前的值。后台线程会定期刷新到磁盘（哪怕不提交也会写入）
3.在buffer pool中更新，此时内存和磁盘不一致，称为脏页
4.写入redo log buffer（内存），记录更新后的数据。redo log buffer会在以下情况下写入磁盘：事务提交；redo log buffer达到指定阈值；后台线程定时刷新。所以不提交的事务的redolog也可能持久化
5.写入binlog cache
6.事务提交（二阶段提交），redo log会写入磁盘
7.buffer pool中的脏页由后台线程异步写入

mysql二阶段提交的过程
mysql有redo log（物理日志，比如操作页）和bin log（逻辑日志，用于主从复制），都需要持久化到磁盘，需要一种机制保证两者都写入成功或都失败
1.将redo log buffer中的日志刷新到磁盘（调用 write 和 fsync），处于prepare阶段
write将数据写入文件的缓冲区，即完成该操作后，不一定立即将数据持久化到磁盘上，仍然在内存中；fsync强制将文件的修改写入磁盘，通常与write配合使用
2.同理，通过write和fsync将binlog写入磁盘
3.在存储引擎内部执行事务，更新redo log，处于commit阶段（先把redo log buffer的状态更新为commit，刷到内存缓冲区，再fsync刷盘）

mysql5.7中的组提交
将多个事务的提交操作合并成一个批处理来减少磁盘IO，将多次fsync合并成一个。有了组提交后，二阶段提交的步骤如下：
1.redolog prepare（write）
2.binlog（write）
3.redolog prepare（fsync）
4.binlog prepare（fsync）
5.redolog commit（write）

mysql为何取消缓存
mysql的缓存在session之间共享。但查询缓存是有限制的，比如：
1.根据文本来匹配，查询必须是字节级别的匹配，大小写敏感
2.不确定函数的查询不会缓存，比如RAND()，NOW()
取消的原因
1.频繁失效。缓存是以表为单位的，即任何数据变化都会使整张表的缓存都失效
2.内存开销大
3.不一致性。不同隔离级别可能导致缓存数据的版本不一致

myisam的索引结构是怎样的
myisam的索引和数据是分离的，myisam的所有索引都是非聚簇索引

mysql的虚拟列是什么
5.7引入的新特性。ALTER TABLE example ADD COLUMN full_name VARCHAR(200) AS (CONCAT(name, ' ', age)) VIRTUAL;
VIRTUAL不会保存到磁盘，mysql会在使用时现场计算虚拟列的值；STORED会保存到磁盘中，相当于帮我们手动创建了一个新的列

脏读、不可重复读、幻读
脏读：读取到了其他事务未提交的数据
不可重复读：其他事务执行了update、delete，导致两次读取结果不同
幻读：不可重复读的一种特殊场景，事务在范围查询时，其他事务执行了insert、delete，导致读取到的条数不一致

如何解决脏读、不可重复读、幻读
脏读：RC级别解决，依赖readview，readview告诉事务应该看到哪个快照
不可重复读：RR级别解决，使用MVCC解决，使用快照读取时，只会用第一次读时生成的readview
幻读：RR级别中，基于MVCC+间隙锁，一定程度上解决，但没有完全避免，当一个事物发生当前读时，会发生幻读

binlog的三种模式
statement：老版本默认的行为，记录SQL语句的原文，会导致主从不一致的问题
row：5.1.5开始支持，8.0改为默认格式。日志中会记录每一行数据被修改的情况，然后在slave端对相同的数据进行修改。不会导致主从不一致的问题，但数据量太大
mixed：5.1.8开始支持。把上面两种格式结合，根据sql，自动选择格式记录

mysql为何默认使用RR隔离级别
oracle支持的隔离级别：RC，串行化，read-only（类似串行化，但不允许修改数据，除非用户是SYS）
mysql中，主从同步是通过bin log进行的，早期只支持statement格式，使用RC的话，会有不一致的问题
T1                              T2
begin                           begin
delete where id<100
                                insert into id=10
                                commit
commit
上述sql执行后，id=10的数据会存在（RC没有间隙锁，不会锁住区间，insert操作不会被阻塞）
这两个sql同步到从库时，T2在前，T1在后，执行后id=10的数据不存在，导致不一致的问题
在RR级别下，由于添加了gap锁和临键锁，导致insert被阻塞，只有T1commit后，insert才会生效，不会有不一致的问题
此外，mysql还禁止bin log=statement时，把隔离级别设置为RC

2pl协议
Two-Phase Locking，核心是将事务分为扩展阶段和收缩阶段，扩展阶段事务可申请锁但不可释放，收缩阶段则只能释放锁不可申请新锁

mysql加什么锁
select * from t1 where id = 10; 不加锁
select * from t1 where id = 10 for update; 加锁   下面的示例中的查询都默认为加锁的查询
RC：
只能加record lock。如果能查询到数据，则在索引及聚簇索引加record lock；如果查询不到数据则不加锁
插入时，会获取意向写锁，不会主动加锁（data_locks表查询不到记录锁），但会加隐式锁来避免并发问题（另一个事务也插入相同id的记录，则data_locks表能看到两条记录锁，一条GRANTED，另一条WAITING）
全表扫描时：走聚簇索引，【所有记录】都被加上锁，然后返回给mysql server层，mysql server层做了优化，会把不符合where条件的数据的X锁提前释放，违反了2pl协议（2段锁协议），最终结果是满足条件的数据加X锁，但不满足条件的数据的加锁、释放锁的过程是不可避免的。上述的优化叫做semi-consistent read，半一致性读，触发条件为RC或RR+设置innodb_locks_unsafe_for_binlog参数

RR：
id等值查询：id存在时聚簇索引加record lock；不存在时加gap lock
id范围查询：如果id=1，3，5，select where id>5 ，只加临键锁
select where id>=5，加id=5的记录锁和临键锁
select where id>=4，(3,5]和(5,+无穷大]区间加临键锁
插入时，和RC类似，获取意向写锁，隐式加记录锁，不会加gap锁
唯一索引等值查询及删除：数据存在时，唯一索引及聚簇索引加record lock；不存在时在唯一索引加gap锁，聚簇索引不加锁
普通索引：普通索引加record lock及gap lock，聚簇索引加record lock。若存在a3、a4和a6的索引值，但查询条件为where a=a5，则把a4-a6的区间加gap锁；但查询条件为where a=a4，会把(a3,a4]加临键锁，(a4,a6)加上gap锁。若为范围查询，比如a>a5，会把a4-a6和a6 - +无穷大加临键锁（LOCK MODE为X）
RR+无索引：类似的，聚簇索引的全部记录加record lock，全部区间加gap lock，同理，若触发半一致性读，mysql会提前把不满足条件的record lock及全部gap lock提前释放

总结，mysql的加锁原则为：
1.加锁的基本单位为next-key lock，是前开后闭的区间（间隙锁是左开右开）
2.查找过程中访问到的对象才会加锁（所以走覆盖索引不会给聚簇索引加锁）
3.唯一索引等值查询时，有满足条件的数据时，退化为行锁
4.索引等值查询，向右遍历且最后一个值不满足等值条件时，退化为间隙锁
5.存在bug：唯一索引的范围查询会访问到不满足条件的第一个值为止

RC如果查询不到记录不加锁，但RR会加gap lock，有潜在的死锁风险

为何很多公司把隔离级别设置为RC
先搞清楚RR和RC的区别
一致性读：也叫快照读，只有RR和RC会使用一致性读，RR中第一次读生成快照，只有本事务更新数据时才会更新快照；RC中每次读都会生成快照
锁机制：RC只会加record lock；RR会加record lock，gap lock，next-key lock
主从同步：RC只支持row，如果使用mixed会自动使用row；RR支持row，statement，mixed三种
设置RC的原因：
支持更高的并发，因为不需要加gap lock和next-key lock，默认支持半一致读，提前释放锁，提高并发读
减少死锁，RR使用了gap lock和next-key lock，锁的粒度变大，死锁概率变大
设置RC后的产生的问题如何解决：
数据不可重复读的问题可以忽略，或通过其他手段解决，比如业务表中加入乐观锁标记，更新时把乐观锁也更新
RC的bin log不支持statement的问题，可以换成row或mixed

RR到底有没有解决幻读
解决了大部分幻读，但没有解决全部。想要解决全部，只能用串行化
问题举例1：事务1当前读，事务2新增数据并提交，事务1更新新增的数据，再快照读，可以读取到新的数据，前后不一致
举例2：事务1当前读，事务2更新数据并提交，事务1当前读，前后不一致

乐观锁的实现
一般通过CAS机制实现
select number from item where id = 2; //查询出number=3
update item set number = number - 1 where id = 2 and number = 3;//number减一
执行失败则重新查询

innodb加索引，会锁表吗
5.6前会对表加排他锁，即其他会话不能读取或修改数据。具体来说，有两种DDL算法：COPY和INPLACE
COPY算法
1.新建临时表，表结构和原表类似
2.原表加MDL共享锁（MetaData Lock，字典锁），只允许读，不允许写
3.把原表的数据逐行拷贝到临时表，且不排序
4.拷贝完成后原表升级为MDL排他锁，不允许读写
5.对临时表进行rename操作，完成DDL操作
INPLACE算法
不创建临时表，直接在原表上修改
1.创建索引数据字典
2.对原表加MDL共享锁
3.根据聚集索引的顺序，查询表中的数据，提取需要的索引数据列，排序后插入新的索引页中
4.等待所有只读事务提交
5.创建索引结束
无论哪种方式，都不允许写操作
5.6开始，使用了online DDL的技术，它允许在执行表结构变更时不阻塞并发的DML操作
不是所有的 DDL 操作都能用 INPLACE 的方式执行，具体要查看mysql的官方手册，比如添加一列
Operation	        Instant	    InPlace	    RebuildsTable	    PermitsConcurrentDML	OnlyModifiesMetadata
Adding a column	    Yes*	    Yes	        No*	                Yes*	                Yes

innodb中的索引类型
B+树和hash索引。B+树又分为聚簇索引和非聚簇索引

唯一索引允许NULL值吗
允许。NULL表示未知，两个未知的事务不代表它们相等，即每个NULL都被视为互不相同，NULL=NULL返回false，因此唯一索引可以包含多个NULL值。但是主键不能为NULL

设计索引有哪些原则
尽量选择区分度高的字段，但也不绝对，也要考虑数据倾斜
尽量避免创建过多过长的索引

MYSQL一定遵循最左前缀匹配吗
在以前是的，在8.0后不一定，因为引入了索引跳跃扫描
比如在a，b两个字段上建立索引，select a from table where b=xx;
当a字段的区分度很低时（比如性别），mysql会走索引的跳跃扫描，explain中extra为Using index for skip scan
如果查询索引之外的列（比如select c）则会失效；group by，distinct也会失效；join也会失效

mysql隐式转换的危害
SELECT 21958580 = '21958581';
return 0
SELECT 2195858021798688768 = '2195858021798688767';
return 1
字符串和数字比较时，有精度丢失的风险。最好使用强制转换

order by
在a,b字段建立索引，能使用索引举例:
select xx order by a/a desc
select xx order by a,b/a desc,b desc
select xx where a = yy order by b/b desc
select xx where a like yy% order by b
不能使用索引举例：
select xx order by b
select xx order by upper(b)
select xx order by a,c
select xx order by a,b desc
select xx where a like yy% order by b desc
综上，mysql在扫描索引时，只能向一个方向扫描，不能中途向反方向扫描

深分页如何处理
1.业务不允许查询偏移量太大的数据
2.利用上一页的id或排序字段做辅助条件，缺点是不允许跳页，只能下一页。举例：手机端的应用，只允许向下滚动，不能跳到某页。最好在排序字段上建立索引，或者说在建立索引时考虑到排序字段。每次查询select * from xx where order_no > yy 此处排序字段为order_no，yy为上一页的最大order_no
3.在排序字段上建立覆盖索引，先查询出满足条件的id（这一步不需要回表），然后二次查询（或者通过一个sql通过join搞定）
总结：深分页没有完美的解决方案，需要对业务或表做些改造，根据实际场景选择

binlog，undolog，redolog的区别
都是日志类型文件
binlog：二进制文件，主要用于数据备份，数据复制等。适用于所有存储引擎
redolog和undolog：主要用于事务管理，崩溃恢复。只适用于innodb

走了索引性能还是很差的原因
选错索引；数据分布不均匀；sql语句存在问题；

索引失效的场景
没有正确创建索引，比如不符合最左前缀
索引区分度不高
数据量太小，全表扫描更快
查询sql中，对字段进行了函数操作、计算、隐式类型转换等

索引下推生效的场景
a,b,c上建立索引
例子1：where a = xx and b > xx and c = xx
例子2：where a > xx and b = xx。但mysql无绝对，如果大部分数据都满足a>xx，则可能会走全表扫描

explain要查看哪些信息
关键的包括：type，possible_keys，key，filtered（越小选择度越高），extra
type：
eq_ref，唯一索引或主键等值查询
ref，非唯一索引等值查询
range，索引的范围查询
index，全索引扫描
all，全表扫描
extra：
Using where：服务器层在得到存储引擎层返回的数据后，再次根据where条件过滤。比如 1.全表扫描 2.索引（比如a）只覆盖了查询条件（where a=xx and b=xx）的一部分
Using index：覆盖索引
Using index condition：索引下推
Using where;Using index，覆盖索引+条件过滤。比如在a,b上建立索引，select a where b = xx （覆盖索引但不符合最左前缀）此时type=index 或者 select b where a > xx （覆盖索引但前导列是范围查询）此时type=range
Using filesort：使用文件排序而非索引排序

是否支持emoji表情存储
utf8mb4编码才支持；mysql的utf8实际为utf8mb3，是不支持的

MYSQL主从复制的过程
1.从服务器开启主从复制后，会创建IO线程和SQL线程
2.从服务器的IO线程，会和主服务器的binlog dump线程建立连接，做交互
3.从服务器的IO线程会告诉主服务器的dump线程从什么位置开始接收binlog
4.主服务器会把改动内容保存到binlog
5.dump线程检测到binlog改动时，会从指定位置开始读取内容，然后被从服务器的IO线程拉过去（不是主推，而是从拉）
6.从服务器的IO线程接收到通知事件后，把内容保存到relay log
7.从服务器的SQL线程会读取relay log，并应用到数据库

mysql有几种复制方式
异步复制：默认，主库执行完事务后，直接给客户端返回成功，不关心从库是否同步完成。缺点是从库可能有延迟，主库挂了，该从库被提拔为主，会丢失改动
全同步复制：主执行完事务后，会等待所有从库都复制完，才会返回成功
半同步复制：主执行完事务后，会等待一个从库复制完，才返回成功

介绍一下InnoDB的数据页
数据页是innodb保存数据的基本单位，通常为16k，每次读写（从磁盘读取到内存，从内存持久化到磁盘）都是以16k为单位的
B+树的每个节点都对应着一个数据页，包括根节点、非叶子节点、叶子节点

驱动表是什么
驱动表是表连接中的基础表，驱动表的数据先被读取，被驱动表的数据后被读取
innodb在选择驱动表时，会考虑索引、where条件、连接类型等
比如a left join b，则一般情况下a为驱动表，b为被驱动表，但b<<a时不一定。inner join时，mysql会选择数据量小的表作为驱动表
在explain中，多表join时，id会相同，相同时前面的是驱动表

hash join是什么
hash join是mysql 8.0推出的一种多表join的算法，针对equal-join场景，比如 on a.id = b.aid
先将驱动表的数据加载到内存，建立hash表，key为hash键，比如a.id，v为数据行；然后对被驱动表遍历一次，通过hash值在hash表中寻找匹配的行
若内存不够，不能放下hash表怎么办？基于磁盘进行hash join
1.使用hash算法，把驱动表进行分区，保存在磁盘上
2.用同样的算法把被驱动表进行分区，保存在磁盘上
3.将驱动表的某个分区加载到内存，将被驱动表的同一分区也加载到内存，进行匹配
4.对每个分区都进行同样操作

执行大事务有什么问题
所谓大事务，就是sql条数多，执行时间长
问题包括：难以回滚、主从延迟高、锁竞争、占用日志空间

如何做热点数据的高效更新
所谓热点数据高效更新，即对同一条数据频繁更新，一直是业内难题。以库存扣减举例
方案1：库存拆分，把大的库存拆成多个小的库存，一次扣减可以分散到不同的库或表中进行，降低粒度提高并发
优点是简单，缺点是存在碎片问题（比如a的库存为0，b的库存不为0，则总库存不为0，但路由到a的用户无法扣减）
方案2：请求合并，即多个update合并成一个进行批量更新
方案3：很多大公司内部会改造mysql，开启热点更新自动探测，让大量并发update排队执行。相比正常的update，不需要抢锁。很多云上数据库都支持了

自增主键用完了怎么办
如果建表sql中，手动设置了主键自增，则主键用完后，再次新增时会报错
如果建表sql中，没有显示指定主键，即隐式主键（会用row_id），则主键用完后，row_id会从0重新开始

为何不建议使用存储过程
可维护性差：逻辑复杂
调试及测试困难：很难打断点或打日志
不同数据库之间不兼容
安全问题：如果不能正确处理输入参数，可能导致SQL注入

数据库如何做加解密
1.服务端加解密，数据库不知道明文，一般采用对称加密，比如AES
2.数据库加密，MYSQL内置了一些加密函数，直接使用这些函数加解密，比如AES_ENCRYPT(str,key)和AES_DECRYPT(crypt_str,key)。其中str为明文，crypt_str为密文，key为密钥

数据库加密后如何做模糊查询
推荐明文分词。比如明文为renbingtao，则对明文进行分词，拆成ren，bing，tao三个，然后分别加密，保存在额外字段中
当使用ren，bing，tao进行模糊查询时，就可以对分词加密然后去数据库中匹配
缺点：冗余字段+数据；不够灵活，比如enbing就无法模糊查询

索引合并
5.1引入，以下sql就可能使用到索引合并
例1：select * from xx where key1 = 10 or key2 = 20;
例2：select * from xx where (key1 = 10 or key2 = 20) and key3 = 30;
如果使用到了索引合并，explain中的type列会显示为index_merge，且在extra中会显示具体哪种合并策略
Using union，如例1；Using intersect，当where中使用了and时，系统会使用多个索引，然后找出交集

如何查看一个sql的耗时
开启特性
set profiling = 1
执行sql
xxx
查看耗时
show profiles

数据库扫描表的定时任务如何避免出现死循环
背景：某个定时任务，会执行select * from xx where state = '1' order by id limit 100;对扫描出来的数据执行一些操作
有时某些数据的state会一直处于1，导致每次扫描出来的数据都是相同的，后续的数据一直无法执行
正确办法：select * from xx where state = '1' order by id where id > last_id limit 100;每次执行后，记录最大的id作为last_id

mysql是ap还是cp的
ac的。默认情况下的mysql，虽然有多个节点，但多数为主从，只有主节点提供服务，即不存在分区容错性P，所以为ac
但如果是采用的读写分离，主从都对外提供服务，则为AP

在索引覆盖时，二级索引如何使用MVCC
这个问题问的是，在使用覆盖索引时，不会回表，但是undolog版本链的头节点又是在聚簇索引中，导致无法使用MVCC
innodb发现二级索引页有一个PAGE_MAX_TRX_ID（表示修改过该页的最大事务id）太新的，或者二级索引的记录被标记为已删除，innodb可能会使用聚簇索引，即覆盖索引也可能会回表
innodb在更新数据时，索引的PAGE_MAX_TRX_ID也会更新。如果readview的min_trx_id>page_max_trx_id，则表示该索引可见，可以不回表。否则需要回表

blob和text有什么区别
blob用来保存二进制数据，比如图片，视频，不支持字符集转换和排序；text保存文本数据，比如小说，支持字符集转换和排序

mysql更新索引时，会锁表吗
从5.6版本开始，支持online ddl，一般不会锁表。online ddl是尽可能保证执行ddl期间不会阻塞dml操作，尽可能意味着不是所有ddl都会使用online ddl加速

limit执行过程
limit是最后执行的（from，where，select，distinct，order by，limit）。如果是limit 100,10，则需要对全部结果集排序，即需要查询出全部结果，然后返回100-110；如果是limit 100，则不需要排序，即只需要查询100条数据即可，不需要查询全部结果

一次insert操作，mysql几种log的写入顺序
写undolog - 写redolo，处于prepare阶段 - 写binlog，刷盘 - 写redolog，处于commit阶段

如何优化join
添加索引。比如on a.id = b.aid，则在b的aid上建立索引
小表驱动大表
数据过滤后再join。比如select xx from (select xx from xx where xx) as xx on xx。把子查询的范围缩小
使用内连接，即inner join
8.0版本使用hash join，针对equal-join场景

