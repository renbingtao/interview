进程的创建
操作系统启动时，通常会创建若干个进程，有些是前台进程，即同用户（人类）交互。其他的是后台进程，与特定的用户没有关系
停留在后台处理email、web页面之类的进程称为守护进程
新进程都是由一个已存在的进程执行一个用于创建进程的系统调用而创建的
在unix中，只有一个系统调用可以创建新进程：fork，父子进程拥有相同的内存映像、环境字符串、打开文件。通常，子进程接着执行execve来修改内存映像并运行新程序

进程的终止
多数进程是由于完成工作而终止的。程序完成了工作后，会执行一个系统调用（在UNIX中该调用是exit），通知操作系统它的工作已经完成
第二个原因是进程发现了错误，比如编译不存在的文件
第三个原因是程序中有错误，比如除数为0
第四个原因是执行了kill杀死进程

进程的层次结构
在UNIX中，进程和它所有子进程及后裔共同组成一个进程组。比如用户从键盘发出一个信号时，该信号被送给和键盘相关的进程组的所有成员
在UNIX中，所有的进程都属于以init为根的一颗树

进程的状态
运行态：占用CPU
就绪态：可运行，但因为其他进程正在运行而不能运行
阻塞态：除非某种外部事件发生，否则进程不能运行
前两种状态类似，第二种状态是暂时没有CPU分配给它。第三种状态的进程不能运行，即使CPU空闲

进程的实现
操作系统维护着一张表：进程表，包含：程序计数器、堆栈指针、内存分配状况、所打开文件的状态等

线程
每个进程有一个地址空间和控制线程，这几乎就是进程的定义。不过经常存在同一个地址空间中准并行运行多个控制线程的情形，这些线程就像分离的进程
为何有了进程还要有线程
1.线程共享地址空间和数据
2.线程更加轻量级，创建一个线程比创建进程快10-100倍
3.如果线程存在大量的计算和IO处理，则会加快执行速度（但如果是CPU密集型则不能）
4.在多CPU系统中，多线程是有益的
