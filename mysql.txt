
========================数据库及mysql========================

一致性
事务执行前后，数据库的完整性没有遭到破坏。可理解为逻辑上保持正确，比如转账后余额不能小于0，转账前后双方余额总额一致。

可重复读
事务多次读取同样的记录，结果是一致的，解决了不可重复度，但无法解决幻读问题。

幻读
可重复读及以下的隔离级别下，事务多次进行范围读取，返回的行数不一致（其他事务插入数据并提交）。mysql通过间隙锁解决了幻读的问题。

不可重复度和幻读的区别
比如查询某条数据，可重复读的结果都是一致的，即解决了不可重复度；但统计数据总数，两次统计之间有数据插入，则统计到的结果不同，即发生了幻读

死锁
多个事务在同一资源上相互占用并请求锁定对方占用的资源。innodb的处理方法是将持有最少行级排他锁的事务回滚。

事务日志
存储引擎修改表数据时修改内存中的拷贝，再把修改行为记录到硬盘的事务日志中，采用追加的方式，顺序IO。事务日志持久化后，内存修改的数据再慢慢刷回磁盘，也成为write ahead log，修改数据要写两次磁盘。

隐式和显式锁定
innodb可以在事物执行中随时锁定，只有提交或回滚时才会释放锁，且所有的锁都是同一时刻释放，可以用select xx lock in share mode或select xx for update显式加锁。begin及commit只影响是否手动开启事务，不影响锁，手动开启事务中select默认也是不加锁

范式
1.每个列不可再分割，比如“电话邮箱”列可继续分割，不符2.非主属性完全依赖于主键，而不是主键的一部分，比如主键为省+市，则省级单位只依赖于省而不依赖于市，不符3.非主属性不传递依赖于主键，比如A唯一确定B，B唯一确定C，ABC在同一张表中则不符。举例：市唯一确定省，省唯一确定国，则市、省、国放在同一张表内是不符的，因为国会冗余，应拆分为市省表+省国表

锁
mysql按排他性可分为读锁、写锁和意向锁，按粒度可分为表锁、记录锁（record lock）、间隙锁（gap lock）、临键锁（next-key lock）等。如果查询条件使用了唯一索引，则使用记录锁；使用普通索引，使用间隙锁，间隙锁唯一的作用是阻止其他事务向间隙中插入数据，即幻读，所以不区分共享或者排他，功能也是一致的；临键锁为记录锁和间隙锁的组合。可以在performance_schema.data_locks、show engine innodb status查看事务持有锁的情况

读已提交时
不需要防范幻读，所以gap锁不生效，则next-key lock也不生效。使用快照读，查询不到数据时只会加表级意向锁；查询到数据时在索引及主键上加记录锁REC_NOT_GAP

可重复读时
都会在表上添加意向锁，在主键加记录锁（S,REC_NOT_GAP或者X,REC_NOT_GAP），故下文省略，主要考察对索引加锁
索引等值查询：值存在时，索引加REC_NOT_GAP锁；值不存在时，在索引上加gap锁，比如索引值为2和5，查询索引值为4的数据时，2-5这个区间会加上gap lock，另一个事务插入索引值为3的数据时会阻塞
索引范围查询：在索引上加临键锁（S或者X），包括前后索引值也会加

两阶段锁定
事务执行期间，随时都可以获取锁，但锁只有在提交或回滚后才会释放，且所有锁都会释放

当前读
select for update/share，insert、update等，会加锁
快照读
select MVCC非阻塞式读

每个事务在第一次读取任何数据时分配一个事物ID（增删改查，注意查也会生成）

MVCC
行级锁的变种，RC和RR生效，用于保证隔离性。由三部分组成：隐藏字段、undo版本链、readview
隐藏字段：主要包括操作这条数据的事务id（trx_id，每个事务在第一次读取任何数据时分配一个事物ID（增删改查，注意查也会生成））和指向该数据前一个版本的指针（事务修改记录时，向undolog写入一条记录，记录如何恢复，事务的回滚指针指向该undolog）
undolog版本链：同一条数据的不同版本组成的链条，在undo log中维护
readview：用于控制具体选择哪个版本，包含：当前活跃的事务id集合、预分配事务id，即当前最大事务id+1，max_trx_id、最小活跃事务id，min_trx_id、readview创建者的事务id。
在判断数据可见性时，从最新一条开始，根据数据访问规则检查该版本的数据是否可见，可见则返回，不可见则递归地查看上一版本。
版本链的数据访问规则：1.当前事务id==readview创建者的事务id时，可见2.当前事务id<最小id，可见3.当前事务id>最大id，不可见4.当前事务id在最大最小之间（min<=tx<=max），如果在活跃事务id集合，说明当时事务还未提交，不可见，否则可见。
RR使用mvcc不能完全避免幻读。连续多个快照读，readview复用，不会幻读；但如果在快照读之后使用当前读，readview会在当前读时重新生成，产生幻读。

三大日志
undo log、redo log、bin log。bin log是mysql服务器层保存的，另外两个是innnodb特有的。

优化数据结构
尽量避免保存null，如果查询中包含可为null的列，则索引、索引统计和值比较更复杂，使得mysql更难优化。更小的通常更好。简单为好，比如使用mysql内置的时间格式而不是字符串
整数类型：tinyint,smallint,mediumint,int,bigint，他们使用8-64位的存储空间。可以指定整数的宽度，但只是影响显示字符的个数，对于计算和存储没有影响
字符串类型：VARCHAR使用1或2个字节保存字符串长度；CHAR在保存时会删除所有末尾的空格
BLOB和TEXT的唯一区别是BLOB保存二进制，没有排序规则或字符集，但TEXT有
DATETIME是没有时区的

索引类型
B+ tree；自适应哈希索引，innodb发现某些索引值被频繁访问时，会在原有b+树索引之上，再建一个哈希索引，这个过程是完全自动化，用户无法控制或配置，但是可以关闭该特性
三星系统评价：若索引将相关记录放在一起则为一星；若索引中的数据顺序和查找中的排列顺序一致则二星；若索引中的列包含查询需要的全部列则为三星
索引的选择度：不重复的索引值/记录总数，范围从1/t到1之间，越大则查询效率越高。但只看平均选择度是不够的，因为数据分布可能是不均匀的
前缀索引：只对字段的前一部分字符进行索引。前缀长度的选择，可以先计算列的选择度，然后逐步加大前缀的长度，使得前缀的选择度接近列的选择度
索引合并：一定程度上使用表的多个单列索引定位指定行，有三个变种：OR的联合，AND的相交，前两种的组合。以where a=xx or b=xx为例，explain的extra列中会显示Using union(idx_a,idx_b)；

主键
若没有定义主键，innodb会选择非空唯一索引来代替，若没有，会隐式定义一个主键
何时不适合主键顺序插入：高并发场景，按主键顺序插入可能造成写入竞争，主键的上界成为热点，导致gap lock的竞争。注意这里不是主键自增

主键自增
可修改innodb_autoinc_lock_mode参数：传统模式，持有特殊的表级锁（自增锁）直到插入完毕，无论单条还是批量；连续模式，对于大多数的新增，使用轻量级的互斥锁而非表级锁生成主键，互斥锁只在生成主键的瞬间持有，但对于特殊的插入，比如insert select，使用表级锁；交错模式，为每个插入线程分配一个自增主键值的范围，然后在这个范围内生成自增主键，范围用完后，向innodb申请新的范围

排序
mysql有两种方式生成有序结果：排序操作，或者按索引顺序扫描。type列为index，则使用了索引扫描，extra列包含Using filesort，则进行了排序，内存够时在内存中排序，内存不足时将数据分为很多小部分，每个部分排序然后保存在磁盘，然后合并。排序时会申请行数据的最大空间，比如varchar按最大长度，utf8mb4按4字节申请。如果索引包含a，b，则order by a desc,b desc的extra包含Backward index scan

叶子节点
聚集索引包含主键列、事务ID、回滚指针、剩余列；二级索引包含主键值

行转列
case when

explain
type值包含eq_ref（主键或唯一索引等值查询）ref（非唯一索引等值查询）range（索引范围查询）index（全索引扫描）ALL（全表扫描）；key_len可用于判断索引的使用情况；extra包含using index；实际执行explain analyze

DDL会隐式提交事务

分布式事务
包括XA，TCC，最终一致性等。

XA：是一种协议，定义了事务协调者和局事务参与者的接口。
二阶段提交把整个事务提交分为prepare和commit两个阶段。一阶段：协调者向参与者发送prepare请求，参与者收到请求后执行事务但暂时不提交，并回复是否可以提交事务。二阶段：只有所有参与者都回复可以提交时，协调者才发送提交命令，任一参与者不允许提交或回复超时，协调者都发送回滚请求。
三阶段：引入了超时机制。在prepare前多了一个询问阶段，即询问参与者是否可以执行事务，参与者会检查自身状态，比如资源是否充足等。
优缺点：严格遵循ACID原则，保证强一致性；广泛应用，主流数据库都支持XA协议；开发便捷，程序员按照XA的接口定义事务即可。性能差，对资源进行锁定；协调者存在单点故障，比如第一阶段成功，协调者在发出提交命令前宕机，则所有服务的资源都被锁定，一直等待。

TCC由一系列子事务组成，每个子事务都需要实现try-confirm-cancel三个接口。一阶段try进行资源锁定，不是数据库层面而是业务层面的锁定。二阶段confirm真正执行业务，处理try阶段预留的资源，confirm要求实现幂等，失败后重试。三阶段cancel释放try阶段预留的资源，同理要满足幂等。
举例：AB都有100元，A给B转账30元。try：检查A余额是否大于30元，大于则冻结30余额。所以其他事务查询AB的余额还是100元。confirm：设置A的余额为70，冻结余额清空，B的余额为130。cancel：A的冻结余额清空
在事物执行期间，其他事务如果要并发修改A的余额，需要查看冻结余额，比如A只有70元是可用的。或者干脆不允许其他事务修改余额
优缺点：并发程度高，不需要在数据库层面锁定资源。对业务有入侵性，需要实现三个接口并保证幂等

最终一致性方案：适用于资源不需要回滚，只需要一致性的情景，比如数据清理。通过不断重试最终完成，实现弱一致性
