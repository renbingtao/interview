
DDD共分成四层架构：表现层->应用层->领域层->基础设施层

领域层：封装领域模型（实体、值对象、聚合、领域服务等），实现核心业务逻辑和规则，是系统的 “灵魂”。核心组件如下
实体：领域的主要业务对象。订单领域的实体是订单，一般包含订单id，订单状态，用户id，下单时间等
值对象：可理解为实体的附加属性。比如订单的收获地址，金额等
聚合：由实体和值对象共同组成，通过【聚合根】对外暴漏接口
领域服务：部分业务无法归属到单一实体，需要处理跨实体/聚合的业务逻辑
领域事件：记录领域内发生的事件，通知其他模块，实现松耦合
仓库接口：定义保存、查询等接口，不涉及具体实现

应用层：协调领域层完成业务流程，对外暴露用例接口，不包含业务规则，仅做 “编排”。应用层负责事务管理、权限校验等横切关注点。核心组件如下
应用服务：接收表现层的请求，调用领域层组件（实体、领域服务等）完成业务流程

基础设施层：提供技术能力支持，实现跨层的技术细节（如持久化、通信、工具类等）。核心组件如下
仓库实现：实现领域层定义的【仓库接口】，负责实体的持久化
外部服务集成：封装第三方接口调用（如支付接口、消息队列）

表现层：处理用户交互，接收输入并展示输出，是系统的 “入口”。核心组件如下
控制器（Controller）
视图（View）

其他概念：
防腐层：用于保护核心领域模型不被外部系统（如第三方服务、遗留系统）的设计或接口 “污染”，避免领域层依赖外部系统的实现细节。实现方式可以是适配器模式
充血模型：将业务逻辑封装在领域对象中（比如实体，值对象）
限界上下文：限界上下文是领域模型的边界，每个上下文内有独立的领域模型、术语表和业务规则
