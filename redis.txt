
========================redis========================

缓存穿透
查询不存在的数据，导致请求打到db

缓存击穿
热点数据在缓存中失效，所有请求瞬间打到db。可以加入互斥锁，缓存失效时上锁，查db，写缓存，释放锁；其他线程请求时sleep一会

缓存雪崩
缓存集中在一段时间失效

RDB
RDB生成的文件是压缩的二进制文件。有两个redis命令会生成rdb：save和bgsave。save会阻塞redis服务进程直到rdb文件创建完毕；bgsave会创建一个子进程，由子进程创建rdb
redis没有专门的命令加载rdb，而是在redis启动时检测是否存在rdb文件，存在则自动载入。但如果开启了aof，则优先使用aof文件；aof关闭时才使用rdb
生成rdb期间，是可以修改数据的，而子进程是看不到修改的数据的，因为rdb采用copy on write技术，类似快照

AOF
服务器执行的写命令会保存到AOF文件中
服务器的写命令会追加到aof_buf缓冲区中，服务器会根据策略（每次，每秒-默认，由系统决定）将缓冲区的内容写入AOF文件中
AOF文件过大时会重写，这里的重写不需要读取旧的aof文件，而是直接从数据库读取键值对，然后以redis命令的形式保存。与rdb类似，aof重写也是由子进程完成（bgrewriteaof）
在重写期间，写命令会继续执行，为了保存这部分增量数据，redis提供了aof重写缓冲区（在子进程fork后使用），在AOF重写完成后，AOF重写缓冲区的内容会写入新的AOF文件中，然后替换旧的AOF文件

事件
redis服务器是事件驱动程序，处理文件事件和时间事件
文件事件
redis基于reactor模式开发了文件事件处理器，使用IO多路复用程序监听多个套接字。6.0以前的redis的IO多路复用模型是单线程的；6.0及以后使用了多线程来处理网络IO
时间事件
redis使用周期性事件，将所有时间事件放在一个无序链表中（元素包含id，表示到期时间的when属性，无序指不按照when排序，链表本身是按照id排序的），时间事件执行器运行时遍历整个链表，找到到期的事件并执行
serverCron函数默认每秒运行10次，内容包括：更新各种统计信息；清理过期的键值对；尝试AOF或RDB操作；主服务器对从服务器定期同步；（集群模式）对集群进行定期同步和链接测试

reactor模式
基于事件驱动的设计模式，将事件的监听和处理分离，在网络编程领域应用广泛。有一个或多个reactor对象监听事件源（比如网络链接），有事件发生时，reactor将事件分发给对应的处理器。
组成部分：reactor，核心，负责监听事件源，一般使用操作系统提供的IO多路复用机制（如select，poll，epoll）来监听多个事件源。event handler：处理不同类型的事件。事件多路分解器，通常是操作系统提供的IO多路复用函数
工作流程：创建reactor和事件处理器，将处理器注册到reactor，reactor调用事件多路分解器，开始循环监听事件，事件发生时，事件多路分解器将事件返回给reactor，reactor根据事件的类型，分发给不同的事件处理器

IO多路复用函数
select：每当进程打开一个文件或创建一个套接字时，内核会为其分配一个fd，fd表是线程独立的，单个进程可监控的文件描述符fd数量是有上限的（大多数系统默认是1024）。
缺点：对套接字扫描是轮询的，即不管套接字是否活跃都遍历一遍；此外每次调用select时都需要传一个fd_set集合（因为select函数本身会修改传入的fd_set集合，将未发生变化的fd对应的位清除），用户空间和内核空间在传递该集合时复制开销比较大

poll：本质上和select没有区别，但是没有最大连接数的限制，因为采用了数组；另外不需要每次调用时都传该数组，数组元素叫pollfd，结构为fd+events，即要监听的事件+revents，即发生的事件，由操作系统填充。poll函数不会修改event，只会修改revent，因此开销更小

epoll：linux独有的机制，有LT（水平触发，默认）和ET（边缘触发）两种模式。epoll使用一个fd（epoll fd）来管理其他fd（event fd）。在epoll fd上注册了关注的事件，当这种事件发生时，epoll会通知程序。epoll是基于事件驱动的模型，避免了无效的轮询。epoll内部使用了红黑树来管理注册的事件，因此查询复杂度为O(log n)。水平触发：只要这个fd还有数据可读，每次epoll_wait函数（作用是等待fd上事件发生）都会触发，提醒程序处理；边缘触发：只会提示一次，直到下次有数据流入之前都不会再提示，无论fd中是否还有数据可读，因此使用ET一定要把缓存读光
