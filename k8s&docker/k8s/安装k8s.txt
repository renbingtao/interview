
================================= 所有节点安装docker、kubeadm、kubelet、kubectl =================================
# 设置docker repo的位置
install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
chmod a+r /etc/apt/keyrings/docker.asc
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# 安装docker组件
apt-get update
apt-get install -y docker-ce docker-ce-cli containerd.io

# 配置docker加速
mkdir -p /etc/docker
tee /etc/docker/daemon.json << EOF
{
    "registry-mirrors":["https://82m9ar63.mirror.aliyuncs.com"]
}
EOF
systemctl daemon-reload
systemctl restart docker
systemctl enable docker

创建快照 docker init

安装kubeadm、kubelet、kubectl
apt-get install -y kubelet=1.25.10-00 kubeadm=1.25.10-00 kubectl=1.25.10-00

systemctl enable kubelet
systemctl start kubelet

# 生成并修改 containerd 配置文件，不执行这一步会出现很多奇怪的bug
containerd config default | tee /etc/containerd/config.toml

vi /etc/containerd/config.toml
修改内容
[plugins."io.containerd.grpc.v1.cri"]
将 sandbox_image 改成registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.8
[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
将 SystemdCgroup 改为true

或
sed -i 's#sandbox_image = ".*"#sandbox_image = "registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.8"#g' /etc/containerd/config.toml
sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml


#临时启用br_netfilter模块
modprobe br_netfilter
#永久启用br_netfilter模块
vi /etc/modules-load.d/br_netfilter.conf
内容为
br_netfilter

创建快照 k8s component init

================================= 部署master节点 =================================
在master节点执行
建议先提前拉取镜像
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.25.10
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.25.10
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.25.10
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.25.10
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.9.3
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.5.6-0
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.8

验证
docker images

kubeadm init --apiserver-advertise-address=172.24.223.101 --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers --service-cidr=10.96.0.0/12 --pod-network-cidr=10.244.0.0/16 --kubernetes-version=v1.25.10

# 若执行失败，重新执行init时，需要先执行下面的步骤
# 清理残留旧组件
rm /etc/kubernetes/manifests/*.yaml
rm -rf /var/lib/etcd/*
# 停止kubelet，否则会端口占用
systemctl stop kubelet

执行成功后，按提示执行
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
如果是root用户，可以执行
export KUBECONFIG=/etc/kubernetes/admin.conf

mkdir /k8s-install
chmod -R 777 /k8s-install
cd /k8s-install
将kube-flannel.yml上传至/k8s-install，执行
kubectl apply -f kube-flannel.yml
如果希望回滚这个配置，则执行
kubectl delete -f kube-flannel.yml

记录管理台输出的kubeadm join命令。如果清除了，可以再次生成
kubeadm token create --print-join-command

创建快照k8s master init
================================= node节点加入 =================================

对node1和node2执行
kubeadm join 172.24.223.101:6443 --token pzqmlo.bj3sp7ian92p5kl9 --discovery-token-ca-cert-hash sha256:1831261e6b1219321106b02f9102d884bd9847b5591fce1afc80535e51049c26

在master查看
kubectl get nodes
如果状态是NotReady，稍等一会，flannel正在创建网络。等待状态变为Ready
