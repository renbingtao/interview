
平衡二叉树
最矮的树和最高的树高度差最多为1，即平衡因子=左子树高度-右子树高度的绝对值<=1。不平衡时，再判断不平衡的子树是左节点还是右节点插入导致的不平衡。
LL型(平衡因子=2且子树的平衡因子=1)右旋，RR同理左旋；LR型（平衡因子=2且子树的平衡因子=-1）左右旋，同理RL型右左旋。
查询时间复杂度O（log n），n为节点总数
适用于插入删除少，查询多的场景

红黑树
由于平衡二叉树对高度差的要求很高，需要频繁旋转，插入性能差，因此定义了红黑树，减少旋转次数。最高的树的高度最多是最矮的树的高度的2倍。
规则：是搜索树（左根右）。每个节点为红或者黑。根及叶子节点为黑，这里的叶子节点指的是最下面的节点下的null节点。连续两个节点不能为红。根到叶子节点（null）的黑色节点总数一致。
规则总结为：左根右，根叶黑，不红红，黑路同
插入时，默认插入红色节点。当不满足规则时，进行判定：叔叔节点是红还是黑？如果是红色，则父叔爷三个节点变色（红变黑，黑变红），同时爷爷节点变为插入节点，重复上述操作；如果是黑色，进行LL、RR等旋转（参考平衡二叉树），然后对旋转点及中心点进行变色

B树
B树为M叉查找树，即节点最多有M个子节点，阶为M（二叉树的阶为2）
节点的扇出在M/2到M之间
所有叶子节点的高度一致；内部节点包含关键字、记录指针、指向下一节点的指针
所有节点的关键字都是从小到大排序

B+树
B树的升级版，内部节点不保存记录指针，使得扇出变大，树矮胖

贪心算法与动态规划的区别
贪心算法追求局部最优解，划分的每个子问题都最优，但不能保证全局最优
动态规划：将问题分解为重复的子问题，每次都寻找左右子问题解中最优的解，一步步得到全局最优解。重复的子问题可以记录下来，避免重复计算
比如钱币分为1、3、4元，要6元，贪心先拿4，再拿两个1；而动态规划拿两个3

分治法
与动态规划类似，将大问题分解为小问题，但这些小问题是独立的
