简单介绍下你做的最近的2个项目，以及你担任的职责

基于DDD进行领域拆分及代码管理，简单介绍下怎么做的
DDD一般抛开技术，从业务本身出发。用户、组织、角色、权限这些是所有系统都需要的，做成基础服务层。有些功能点和业务无关，是用来支撑业务的，比如分布式锁、调度、敏感数据在db加密存储、敏感数据脱敏展示，放在系统服务层。但是又不能把所有业务支撑的功能点都放在系统服务，这样会过大，因此单独拿出来做成独立的领域，比如集成服务，这是用来同步数据到其他系统的；比如流程服务，主要做审批流；比如api服务，负责远程调用和对外暴漏接口。剩下的就是针对不同业务开发具体的服务，比如发票、财务、房地产等
代码管理是一个领域对应一个git工程，一个子领域对应一个特性分支，各个特性分支独立开发，完成后合并到生产分支，独立上线

你们的项目用到了rabbitmq，这个消息中间件的主要功能和作用是什么
异步、削峰、解耦。我们系统中主要是做跨领域的事件通知，因为我们是一个领域对应一个pod，a领域有个单据提交，b领域要做一些事，那就要借助mq

消息丢失或者消息重复消费的问题要怎么解决
创建交换机、队列及消息时，设置为持久化；生产者发送消息时添加ConfirmListener，可以知道发送成功还是失败，失败则重试；

这个项目的系统架构是怎样的

从系统架构的层面去考虑，要去解决什么问题
这里问的是高可用、安全性

简单描述下采用绞杀者模式解决大表无法直接添加索引的痛点

描述下布隆过滤器的原理

设计模式你知道哪些，你们的项目里实际使用了哪些设计模式

设计模式有哪些优点，为什么要用设计模式

分享下慢sql优化的经验
