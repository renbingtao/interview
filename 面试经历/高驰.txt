list和map的区别
list是有序集合，可重复，按照插入顺序排序
map是键值对，key唯一

有哪些常用的list和map
ArrayList、LinkedList、CopyOnWriteArrayList（线程安全；读不需要加锁；写是获取ReentrantLock，创建一个副本，在副本上写，写完后引用指向副本。适合读多写少的场景。问题是可能读取到旧数据，最终一致性）
HashMap、LinkedHashMap（hashmap+双向链表）、TreeMap（底层是红黑树，按照key排序）、ConcurrentHashMap（无论是java7还是8，读都不需要加锁，写才加锁）

什么是线程安全
当多个线程同时访问同一个共享资源，无论这些线程的执行顺序如何被操作系统调度，该资源的行为始终符合预期的逻辑规则，不会出现数据不一致、逻辑错误或异常等问题

怎么保证线程安全
synchronized、ReentrantLock、CAS、使用线程安全的集合工具、volatile（保证可见性但不保证原子性）

ConcurrentHashMap的实现原理
java7：采用分段锁（Segment），由16个Segment组成，每个Segment是一个小hashmap，在写Segment前要加锁（读不用，依赖volatile保证可见性），并发最高16
java8：通过cas+sync实现。底层为数组+链表/红黑树，在写链表的头节点时加锁，同理读不用

分布式系统如何保证线程安全
分布式锁：基于mysql、基于redis（lua脚本）、基于zookeeper（在持久化节点下创建有序号临时的节点，并监听前一节点）

面向对象的特性
封装、继承、多态

接口和抽象类的区别
接口描述功能，抽象类描述本质

JMM内存模型有了解吗
JMM将内存分为【主内存】和【工作内存】。主内存是所有线程共享的，保存了所有对象；工作内存是线程私有，保存了共享对象的副本。线程对共享变量的操作不能直接读写主内存，而是读写副本，再同步主内存。有短暂的不一致的可能。
多线程操作共享变量时要考虑3点：可见性、有序性、原子性。volatile可以保证前两点，但无法保证原子性

gc是如何工作的
1.通过可达性分析确定哪些对象可以回收
2.根据不同算法进行回收（标记复制、标记清除、标记整理）

平时有没有使用什么设计模式
策略+工厂、代理、模板方法、装饰器、适配器

如何提高代码的复用性
1.无状态的代码提取到工具类
2.多个类存在相似的逻辑时，提取到父类
3.通过组合复用功能（优于继承）
4.使用设计模式，比如工厂、装饰器、模板方法

如何提高代码质量
1.代码风格统一
2.控制代码长度、嵌套次数以提高可读性
3.遵循设计模式，降低耦合度
4.防御性编程
5.代码扫描工具检查坏味道

spring的核心是什么
IOC和AOP

spring的事务是如何实现的

什么是数据库的事务

什么情况下需要使用到事务
多个操作、要求数据强一致性、并发操作

事务的隔离级别有哪些

mysql数据库有哪些索引
b+树索引、哈希索引（仅支持等值查询，innodb有自适应哈希索引，引擎自动创建，无需人工干预）、全文索引

如何保证使用到索引
explain的type

介绍一个你参与最深的项目

如何设计一个高并发系统
缓存、异步解耦、限流熔断

短链如何保证唯一性
采用碰撞概率低的hash函数。通过唯一索引查询是否有冲突，如果有则在原始url上加随机盐再重新生成短链并检测
